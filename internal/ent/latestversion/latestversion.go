// Code generated by ent, DO NOT EDIT.

package latestversion

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the latestversion type in the database.
	Label = "latest_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChannel holds the string denoting the channel field in the database.
	FieldChannel = "channel"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeResource holds the string denoting the resource edge name in mutations.
	EdgeResource = "resource"
	// EdgeVersion holds the string denoting the version edge name in mutations.
	EdgeVersion = "version"
	// Table holds the table name of the latestversion in the database.
	Table = "latest_versions"
	// ResourceTable is the table that holds the resource relation/edge.
	ResourceTable = "latest_versions"
	// ResourceInverseTable is the table name for the Resource entity.
	// It exists in this package in order to avoid circular dependency with the "resource" package.
	ResourceInverseTable = "resources"
	// ResourceColumn is the table column denoting the resource relation/edge.
	ResourceColumn = "resource_latest_versions"
	// VersionTable is the table that holds the version relation/edge.
	VersionTable = "latest_versions"
	// VersionInverseTable is the table name for the Version entity.
	// It exists in this package in order to avoid circular dependency with the "version" package.
	VersionInverseTable = "versions"
	// VersionColumn is the table column denoting the version relation/edge.
	VersionColumn = "latest_version_version"
)

// Columns holds all SQL columns for latestversion fields.
var Columns = []string{
	FieldID,
	FieldChannel,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "latest_versions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"latest_version_version",
	"resource_latest_versions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Channel defines the type for the "channel" enum field.
type Channel string

// ChannelStable is the default value of the Channel enum.
const DefaultChannel = ChannelStable

// Channel values.
const (
	ChannelStable Channel = "stable"
	ChannelBeta   Channel = "beta"
	ChannelAlpha  Channel = "alpha"
)

func (c Channel) String() string {
	return string(c)
}

// ChannelValidator is a validator for the "channel" field enum values. It is called by the builders before save.
func ChannelValidator(c Channel) error {
	switch c {
	case ChannelStable, ChannelBeta, ChannelAlpha:
		return nil
	default:
		return fmt.Errorf("latestversion: invalid enum value for channel field: %q", c)
	}
}

// OrderOption defines the ordering options for the LatestVersion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChannel orders the results by the channel field.
func ByChannel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannel, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByResourceField orders the results by resource field.
func ByResourceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResourceStep(), sql.OrderByField(field, opts...))
	}
}

// ByVersionField orders the results by version field.
func ByVersionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVersionStep(), sql.OrderByField(field, opts...))
	}
}
func newResourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ResourceTable, ResourceColumn),
	)
}
func newVersionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VersionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, VersionTable, VersionColumn),
	)
}
