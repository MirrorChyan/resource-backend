// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MirrorChyan/resource-backend/internal/ent/latestversion"
	"github.com/MirrorChyan/resource-backend/internal/ent/predicate"
	"github.com/MirrorChyan/resource-backend/internal/ent/resource"
	"github.com/MirrorChyan/resource-backend/internal/ent/version"
)

// LatestVersionUpdate is the builder for updating LatestVersion entities.
type LatestVersionUpdate struct {
	config
	hooks    []Hook
	mutation *LatestVersionMutation
}

// Where appends a list predicates to the LatestVersionUpdate builder.
func (lvu *LatestVersionUpdate) Where(ps ...predicate.LatestVersion) *LatestVersionUpdate {
	lvu.mutation.Where(ps...)
	return lvu
}

// SetChannel sets the "channel" field.
func (lvu *LatestVersionUpdate) SetChannel(l latestversion.Channel) *LatestVersionUpdate {
	lvu.mutation.SetChannel(l)
	return lvu
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (lvu *LatestVersionUpdate) SetNillableChannel(l *latestversion.Channel) *LatestVersionUpdate {
	if l != nil {
		lvu.SetChannel(*l)
	}
	return lvu
}

// SetUpdatedAt sets the "updated_at" field.
func (lvu *LatestVersionUpdate) SetUpdatedAt(t time.Time) *LatestVersionUpdate {
	lvu.mutation.SetUpdatedAt(t)
	return lvu
}

// SetResourceID sets the "resource" edge to the Resource entity by ID.
func (lvu *LatestVersionUpdate) SetResourceID(id string) *LatestVersionUpdate {
	lvu.mutation.SetResourceID(id)
	return lvu
}

// SetResource sets the "resource" edge to the Resource entity.
func (lvu *LatestVersionUpdate) SetResource(r *Resource) *LatestVersionUpdate {
	return lvu.SetResourceID(r.ID)
}

// SetVersionID sets the "version" edge to the Version entity by ID.
func (lvu *LatestVersionUpdate) SetVersionID(id int) *LatestVersionUpdate {
	lvu.mutation.SetVersionID(id)
	return lvu
}

// SetVersion sets the "version" edge to the Version entity.
func (lvu *LatestVersionUpdate) SetVersion(v *Version) *LatestVersionUpdate {
	return lvu.SetVersionID(v.ID)
}

// Mutation returns the LatestVersionMutation object of the builder.
func (lvu *LatestVersionUpdate) Mutation() *LatestVersionMutation {
	return lvu.mutation
}

// ClearResource clears the "resource" edge to the Resource entity.
func (lvu *LatestVersionUpdate) ClearResource() *LatestVersionUpdate {
	lvu.mutation.ClearResource()
	return lvu
}

// ClearVersion clears the "version" edge to the Version entity.
func (lvu *LatestVersionUpdate) ClearVersion() *LatestVersionUpdate {
	lvu.mutation.ClearVersion()
	return lvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lvu *LatestVersionUpdate) Save(ctx context.Context) (int, error) {
	lvu.defaults()
	return withHooks(ctx, lvu.sqlSave, lvu.mutation, lvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lvu *LatestVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := lvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lvu *LatestVersionUpdate) Exec(ctx context.Context) error {
	_, err := lvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lvu *LatestVersionUpdate) ExecX(ctx context.Context) {
	if err := lvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lvu *LatestVersionUpdate) defaults() {
	if _, ok := lvu.mutation.UpdatedAt(); !ok {
		v := latestversion.UpdateDefaultUpdatedAt()
		lvu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lvu *LatestVersionUpdate) check() error {
	if v, ok := lvu.mutation.Channel(); ok {
		if err := latestversion.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "LatestVersion.channel": %w`, err)}
		}
	}
	if lvu.mutation.ResourceCleared() && len(lvu.mutation.ResourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LatestVersion.resource"`)
	}
	if lvu.mutation.VersionCleared() && len(lvu.mutation.VersionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LatestVersion.version"`)
	}
	return nil
}

func (lvu *LatestVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(latestversion.Table, latestversion.Columns, sqlgraph.NewFieldSpec(latestversion.FieldID, field.TypeInt))
	if ps := lvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lvu.mutation.Channel(); ok {
		_spec.SetField(latestversion.FieldChannel, field.TypeEnum, value)
	}
	if value, ok := lvu.mutation.UpdatedAt(); ok {
		_spec.SetField(latestversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if lvu.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   latestversion.ResourceTable,
			Columns: []string{latestversion.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lvu.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   latestversion.ResourceTable,
			Columns: []string{latestversion.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lvu.mutation.VersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   latestversion.VersionTable,
			Columns: []string{latestversion.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lvu.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   latestversion.VersionTable,
			Columns: []string{latestversion.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{latestversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lvu.mutation.done = true
	return n, nil
}

// LatestVersionUpdateOne is the builder for updating a single LatestVersion entity.
type LatestVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LatestVersionMutation
}

// SetChannel sets the "channel" field.
func (lvuo *LatestVersionUpdateOne) SetChannel(l latestversion.Channel) *LatestVersionUpdateOne {
	lvuo.mutation.SetChannel(l)
	return lvuo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (lvuo *LatestVersionUpdateOne) SetNillableChannel(l *latestversion.Channel) *LatestVersionUpdateOne {
	if l != nil {
		lvuo.SetChannel(*l)
	}
	return lvuo
}

// SetUpdatedAt sets the "updated_at" field.
func (lvuo *LatestVersionUpdateOne) SetUpdatedAt(t time.Time) *LatestVersionUpdateOne {
	lvuo.mutation.SetUpdatedAt(t)
	return lvuo
}

// SetResourceID sets the "resource" edge to the Resource entity by ID.
func (lvuo *LatestVersionUpdateOne) SetResourceID(id string) *LatestVersionUpdateOne {
	lvuo.mutation.SetResourceID(id)
	return lvuo
}

// SetResource sets the "resource" edge to the Resource entity.
func (lvuo *LatestVersionUpdateOne) SetResource(r *Resource) *LatestVersionUpdateOne {
	return lvuo.SetResourceID(r.ID)
}

// SetVersionID sets the "version" edge to the Version entity by ID.
func (lvuo *LatestVersionUpdateOne) SetVersionID(id int) *LatestVersionUpdateOne {
	lvuo.mutation.SetVersionID(id)
	return lvuo
}

// SetVersion sets the "version" edge to the Version entity.
func (lvuo *LatestVersionUpdateOne) SetVersion(v *Version) *LatestVersionUpdateOne {
	return lvuo.SetVersionID(v.ID)
}

// Mutation returns the LatestVersionMutation object of the builder.
func (lvuo *LatestVersionUpdateOne) Mutation() *LatestVersionMutation {
	return lvuo.mutation
}

// ClearResource clears the "resource" edge to the Resource entity.
func (lvuo *LatestVersionUpdateOne) ClearResource() *LatestVersionUpdateOne {
	lvuo.mutation.ClearResource()
	return lvuo
}

// ClearVersion clears the "version" edge to the Version entity.
func (lvuo *LatestVersionUpdateOne) ClearVersion() *LatestVersionUpdateOne {
	lvuo.mutation.ClearVersion()
	return lvuo
}

// Where appends a list predicates to the LatestVersionUpdate builder.
func (lvuo *LatestVersionUpdateOne) Where(ps ...predicate.LatestVersion) *LatestVersionUpdateOne {
	lvuo.mutation.Where(ps...)
	return lvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lvuo *LatestVersionUpdateOne) Select(field string, fields ...string) *LatestVersionUpdateOne {
	lvuo.fields = append([]string{field}, fields...)
	return lvuo
}

// Save executes the query and returns the updated LatestVersion entity.
func (lvuo *LatestVersionUpdateOne) Save(ctx context.Context) (*LatestVersion, error) {
	lvuo.defaults()
	return withHooks(ctx, lvuo.sqlSave, lvuo.mutation, lvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lvuo *LatestVersionUpdateOne) SaveX(ctx context.Context) *LatestVersion {
	node, err := lvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lvuo *LatestVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := lvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lvuo *LatestVersionUpdateOne) ExecX(ctx context.Context) {
	if err := lvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lvuo *LatestVersionUpdateOne) defaults() {
	if _, ok := lvuo.mutation.UpdatedAt(); !ok {
		v := latestversion.UpdateDefaultUpdatedAt()
		lvuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lvuo *LatestVersionUpdateOne) check() error {
	if v, ok := lvuo.mutation.Channel(); ok {
		if err := latestversion.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "LatestVersion.channel": %w`, err)}
		}
	}
	if lvuo.mutation.ResourceCleared() && len(lvuo.mutation.ResourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LatestVersion.resource"`)
	}
	if lvuo.mutation.VersionCleared() && len(lvuo.mutation.VersionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LatestVersion.version"`)
	}
	return nil
}

func (lvuo *LatestVersionUpdateOne) sqlSave(ctx context.Context) (_node *LatestVersion, err error) {
	if err := lvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(latestversion.Table, latestversion.Columns, sqlgraph.NewFieldSpec(latestversion.FieldID, field.TypeInt))
	id, ok := lvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LatestVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, latestversion.FieldID)
		for _, f := range fields {
			if !latestversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != latestversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lvuo.mutation.Channel(); ok {
		_spec.SetField(latestversion.FieldChannel, field.TypeEnum, value)
	}
	if value, ok := lvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(latestversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if lvuo.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   latestversion.ResourceTable,
			Columns: []string{latestversion.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lvuo.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   latestversion.ResourceTable,
			Columns: []string{latestversion.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lvuo.mutation.VersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   latestversion.VersionTable,
			Columns: []string{latestversion.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lvuo.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   latestversion.VersionTable,
			Columns: []string{latestversion.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LatestVersion{config: lvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{latestversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lvuo.mutation.done = true
	return _node, nil
}
