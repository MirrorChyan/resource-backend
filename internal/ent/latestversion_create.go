// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MirrorChyan/resource-backend/internal/ent/latestversion"
	"github.com/MirrorChyan/resource-backend/internal/ent/resource"
	"github.com/MirrorChyan/resource-backend/internal/ent/version"
)

// LatestVersionCreate is the builder for creating a LatestVersion entity.
type LatestVersionCreate struct {
	config
	mutation *LatestVersionMutation
	hooks    []Hook
}

// SetChannel sets the "channel" field.
func (lvc *LatestVersionCreate) SetChannel(l latestversion.Channel) *LatestVersionCreate {
	lvc.mutation.SetChannel(l)
	return lvc
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (lvc *LatestVersionCreate) SetNillableChannel(l *latestversion.Channel) *LatestVersionCreate {
	if l != nil {
		lvc.SetChannel(*l)
	}
	return lvc
}

// SetUpdatedAt sets the "updated_at" field.
func (lvc *LatestVersionCreate) SetUpdatedAt(t time.Time) *LatestVersionCreate {
	lvc.mutation.SetUpdatedAt(t)
	return lvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lvc *LatestVersionCreate) SetNillableUpdatedAt(t *time.Time) *LatestVersionCreate {
	if t != nil {
		lvc.SetUpdatedAt(*t)
	}
	return lvc
}

// SetResourceID sets the "resource" edge to the Resource entity by ID.
func (lvc *LatestVersionCreate) SetResourceID(id string) *LatestVersionCreate {
	lvc.mutation.SetResourceID(id)
	return lvc
}

// SetResource sets the "resource" edge to the Resource entity.
func (lvc *LatestVersionCreate) SetResource(r *Resource) *LatestVersionCreate {
	return lvc.SetResourceID(r.ID)
}

// SetVersionID sets the "version" edge to the Version entity by ID.
func (lvc *LatestVersionCreate) SetVersionID(id int) *LatestVersionCreate {
	lvc.mutation.SetVersionID(id)
	return lvc
}

// SetVersion sets the "version" edge to the Version entity.
func (lvc *LatestVersionCreate) SetVersion(v *Version) *LatestVersionCreate {
	return lvc.SetVersionID(v.ID)
}

// Mutation returns the LatestVersionMutation object of the builder.
func (lvc *LatestVersionCreate) Mutation() *LatestVersionMutation {
	return lvc.mutation
}

// Save creates the LatestVersion in the database.
func (lvc *LatestVersionCreate) Save(ctx context.Context) (*LatestVersion, error) {
	lvc.defaults()
	return withHooks(ctx, lvc.sqlSave, lvc.mutation, lvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lvc *LatestVersionCreate) SaveX(ctx context.Context) *LatestVersion {
	v, err := lvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lvc *LatestVersionCreate) Exec(ctx context.Context) error {
	_, err := lvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lvc *LatestVersionCreate) ExecX(ctx context.Context) {
	if err := lvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lvc *LatestVersionCreate) defaults() {
	if _, ok := lvc.mutation.Channel(); !ok {
		v := latestversion.DefaultChannel
		lvc.mutation.SetChannel(v)
	}
	if _, ok := lvc.mutation.UpdatedAt(); !ok {
		v := latestversion.DefaultUpdatedAt
		lvc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lvc *LatestVersionCreate) check() error {
	if _, ok := lvc.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required field "LatestVersion.channel"`)}
	}
	if v, ok := lvc.mutation.Channel(); ok {
		if err := latestversion.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "LatestVersion.channel": %w`, err)}
		}
	}
	if _, ok := lvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LatestVersion.updated_at"`)}
	}
	if len(lvc.mutation.ResourceIDs()) == 0 {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required edge "LatestVersion.resource"`)}
	}
	if len(lvc.mutation.VersionIDs()) == 0 {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required edge "LatestVersion.version"`)}
	}
	return nil
}

func (lvc *LatestVersionCreate) sqlSave(ctx context.Context) (*LatestVersion, error) {
	if err := lvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lvc.mutation.id = &_node.ID
	lvc.mutation.done = true
	return _node, nil
}

func (lvc *LatestVersionCreate) createSpec() (*LatestVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &LatestVersion{config: lvc.config}
		_spec = sqlgraph.NewCreateSpec(latestversion.Table, sqlgraph.NewFieldSpec(latestversion.FieldID, field.TypeInt))
	)
	if value, ok := lvc.mutation.Channel(); ok {
		_spec.SetField(latestversion.FieldChannel, field.TypeEnum, value)
		_node.Channel = value
	}
	if value, ok := lvc.mutation.UpdatedAt(); ok {
		_spec.SetField(latestversion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := lvc.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   latestversion.ResourceTable,
			Columns: []string{latestversion.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.resource_latest_versions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lvc.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   latestversion.VersionTable,
			Columns: []string{latestversion.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.latest_version_version = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LatestVersionCreateBulk is the builder for creating many LatestVersion entities in bulk.
type LatestVersionCreateBulk struct {
	config
	err      error
	builders []*LatestVersionCreate
}

// Save creates the LatestVersion entities in the database.
func (lvcb *LatestVersionCreateBulk) Save(ctx context.Context) ([]*LatestVersion, error) {
	if lvcb.err != nil {
		return nil, lvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lvcb.builders))
	nodes := make([]*LatestVersion, len(lvcb.builders))
	mutators := make([]Mutator, len(lvcb.builders))
	for i := range lvcb.builders {
		func(i int, root context.Context) {
			builder := lvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LatestVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lvcb *LatestVersionCreateBulk) SaveX(ctx context.Context) []*LatestVersion {
	v, err := lvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lvcb *LatestVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := lvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lvcb *LatestVersionCreateBulk) ExecX(ctx context.Context) {
	if err := lvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
