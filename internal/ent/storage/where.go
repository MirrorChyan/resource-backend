// Code generated by ent, DO NOT EDIT.

package storage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/MirrorChyan/resource-backend/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldID, id))
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldOs, v))
}

// Arch applies equality check predicate on the "arch" field. It's identical to ArchEQ.
func Arch(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldArch, v))
}

// PackagePath applies equality check predicate on the "package_path" field. It's identical to PackagePathEQ.
func PackagePath(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldPackagePath, v))
}

// ResourcePath applies equality check predicate on the "resource_path" field. It's identical to ResourcePathEQ.
func ResourcePath(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldResourcePath, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdateTypeEQ applies the EQ predicate on the "update_type" field.
func UpdateTypeEQ(v UpdateType) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldUpdateType, v))
}

// UpdateTypeNEQ applies the NEQ predicate on the "update_type" field.
func UpdateTypeNEQ(v UpdateType) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldUpdateType, v))
}

// UpdateTypeIn applies the In predicate on the "update_type" field.
func UpdateTypeIn(vs ...UpdateType) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldUpdateType, vs...))
}

// UpdateTypeNotIn applies the NotIn predicate on the "update_type" field.
func UpdateTypeNotIn(vs ...UpdateType) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldUpdateType, vs...))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldOs, vs...))
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldOs, v))
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldOs, v))
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldOs, v))
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldOs, v))
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldOs, v))
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldOs, v))
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldOs, v))
}

// OsIsNil applies the IsNil predicate on the "os" field.
func OsIsNil() predicate.Storage {
	return predicate.Storage(sql.FieldIsNull(FieldOs))
}

// OsNotNil applies the NotNil predicate on the "os" field.
func OsNotNil() predicate.Storage {
	return predicate.Storage(sql.FieldNotNull(FieldOs))
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldOs, v))
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldOs, v))
}

// ArchEQ applies the EQ predicate on the "arch" field.
func ArchEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldArch, v))
}

// ArchNEQ applies the NEQ predicate on the "arch" field.
func ArchNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldArch, v))
}

// ArchIn applies the In predicate on the "arch" field.
func ArchIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldArch, vs...))
}

// ArchNotIn applies the NotIn predicate on the "arch" field.
func ArchNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldArch, vs...))
}

// ArchGT applies the GT predicate on the "arch" field.
func ArchGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldArch, v))
}

// ArchGTE applies the GTE predicate on the "arch" field.
func ArchGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldArch, v))
}

// ArchLT applies the LT predicate on the "arch" field.
func ArchLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldArch, v))
}

// ArchLTE applies the LTE predicate on the "arch" field.
func ArchLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldArch, v))
}

// ArchContains applies the Contains predicate on the "arch" field.
func ArchContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldArch, v))
}

// ArchHasPrefix applies the HasPrefix predicate on the "arch" field.
func ArchHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldArch, v))
}

// ArchHasSuffix applies the HasSuffix predicate on the "arch" field.
func ArchHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldArch, v))
}

// ArchIsNil applies the IsNil predicate on the "arch" field.
func ArchIsNil() predicate.Storage {
	return predicate.Storage(sql.FieldIsNull(FieldArch))
}

// ArchNotNil applies the NotNil predicate on the "arch" field.
func ArchNotNil() predicate.Storage {
	return predicate.Storage(sql.FieldNotNull(FieldArch))
}

// ArchEqualFold applies the EqualFold predicate on the "arch" field.
func ArchEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldArch, v))
}

// ArchContainsFold applies the ContainsFold predicate on the "arch" field.
func ArchContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldArch, v))
}

// PackagePathEQ applies the EQ predicate on the "package_path" field.
func PackagePathEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldPackagePath, v))
}

// PackagePathNEQ applies the NEQ predicate on the "package_path" field.
func PackagePathNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldPackagePath, v))
}

// PackagePathIn applies the In predicate on the "package_path" field.
func PackagePathIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldPackagePath, vs...))
}

// PackagePathNotIn applies the NotIn predicate on the "package_path" field.
func PackagePathNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldPackagePath, vs...))
}

// PackagePathGT applies the GT predicate on the "package_path" field.
func PackagePathGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldPackagePath, v))
}

// PackagePathGTE applies the GTE predicate on the "package_path" field.
func PackagePathGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldPackagePath, v))
}

// PackagePathLT applies the LT predicate on the "package_path" field.
func PackagePathLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldPackagePath, v))
}

// PackagePathLTE applies the LTE predicate on the "package_path" field.
func PackagePathLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldPackagePath, v))
}

// PackagePathContains applies the Contains predicate on the "package_path" field.
func PackagePathContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldPackagePath, v))
}

// PackagePathHasPrefix applies the HasPrefix predicate on the "package_path" field.
func PackagePathHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldPackagePath, v))
}

// PackagePathHasSuffix applies the HasSuffix predicate on the "package_path" field.
func PackagePathHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldPackagePath, v))
}

// PackagePathEqualFold applies the EqualFold predicate on the "package_path" field.
func PackagePathEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldPackagePath, v))
}

// PackagePathContainsFold applies the ContainsFold predicate on the "package_path" field.
func PackagePathContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldPackagePath, v))
}

// ResourcePathEQ applies the EQ predicate on the "resource_path" field.
func ResourcePathEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldResourcePath, v))
}

// ResourcePathNEQ applies the NEQ predicate on the "resource_path" field.
func ResourcePathNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldResourcePath, v))
}

// ResourcePathIn applies the In predicate on the "resource_path" field.
func ResourcePathIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldResourcePath, vs...))
}

// ResourcePathNotIn applies the NotIn predicate on the "resource_path" field.
func ResourcePathNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldResourcePath, vs...))
}

// ResourcePathGT applies the GT predicate on the "resource_path" field.
func ResourcePathGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldResourcePath, v))
}

// ResourcePathGTE applies the GTE predicate on the "resource_path" field.
func ResourcePathGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldResourcePath, v))
}

// ResourcePathLT applies the LT predicate on the "resource_path" field.
func ResourcePathLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldResourcePath, v))
}

// ResourcePathLTE applies the LTE predicate on the "resource_path" field.
func ResourcePathLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldResourcePath, v))
}

// ResourcePathContains applies the Contains predicate on the "resource_path" field.
func ResourcePathContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldResourcePath, v))
}

// ResourcePathHasPrefix applies the HasPrefix predicate on the "resource_path" field.
func ResourcePathHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldResourcePath, v))
}

// ResourcePathHasSuffix applies the HasSuffix predicate on the "resource_path" field.
func ResourcePathHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldResourcePath, v))
}

// ResourcePathIsNil applies the IsNil predicate on the "resource_path" field.
func ResourcePathIsNil() predicate.Storage {
	return predicate.Storage(sql.FieldIsNull(FieldResourcePath))
}

// ResourcePathNotNil applies the NotNil predicate on the "resource_path" field.
func ResourcePathNotNil() predicate.Storage {
	return predicate.Storage(sql.FieldNotNull(FieldResourcePath))
}

// ResourcePathEqualFold applies the EqualFold predicate on the "resource_path" field.
func ResourcePathEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldResourcePath, v))
}

// ResourcePathContainsFold applies the ContainsFold predicate on the "resource_path" field.
func ResourcePathContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldResourcePath, v))
}

// FileHashesIsNil applies the IsNil predicate on the "file_hashes" field.
func FileHashesIsNil() predicate.Storage {
	return predicate.Storage(sql.FieldIsNull(FieldFileHashes))
}

// FileHashesNotNil applies the NotNil predicate on the "file_hashes" field.
func FileHashesNotNil() predicate.Storage {
	return predicate.Storage(sql.FieldNotNull(FieldFileHashes))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldCreatedAt, v))
}

// HasVersion applies the HasEdge predicate on the "version" edge.
func HasVersion() predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VersionTable, VersionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVersionWith applies the HasEdge predicate on the "version" edge with a given conditions (other predicates).
func HasVersionWith(preds ...predicate.Version) predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		step := newVersionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOldVersion applies the HasEdge predicate on the "old_version" edge.
func HasOldVersion() predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OldVersionTable, OldVersionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOldVersionWith applies the HasEdge predicate on the "old_version" edge with a given conditions (other predicates).
func HasOldVersionWith(preds ...predicate.Version) predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		step := newOldVersionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Storage) predicate.Storage {
	return predicate.Storage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Storage) predicate.Storage {
	return predicate.Storage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Storage) predicate.Storage {
	return predicate.Storage(sql.NotPredicates(p))
}
