// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MirrorChyan/resource-backend/internal/ent/predicate"
	"github.com/MirrorChyan/resource-backend/internal/ent/versioninfo"
)

// VersionInfoUpdate is the builder for updating VersionInfo entities.
type VersionInfoUpdate struct {
	config
	hooks    []Hook
	mutation *VersionInfoMutation
}

// Where appends a list predicates to the VersionInfoUpdate builder.
func (viu *VersionInfoUpdate) Where(ps ...predicate.VersionInfo) *VersionInfoUpdate {
	viu.mutation.Where(ps...)
	return viu
}

// SetVersionName sets the "version_name" field.
func (viu *VersionInfoUpdate) SetVersionName(s string) *VersionInfoUpdate {
	viu.mutation.SetVersionName(s)
	return viu
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (viu *VersionInfoUpdate) SetNillableVersionName(s *string) *VersionInfoUpdate {
	if s != nil {
		viu.SetVersionName(*s)
	}
	return viu
}

// SetReleaseNote sets the "release_note" field.
func (viu *VersionInfoUpdate) SetReleaseNote(s string) *VersionInfoUpdate {
	viu.mutation.SetReleaseNote(s)
	return viu
}

// SetNillableReleaseNote sets the "release_note" field if the given value is not nil.
func (viu *VersionInfoUpdate) SetNillableReleaseNote(s *string) *VersionInfoUpdate {
	if s != nil {
		viu.SetReleaseNote(*s)
	}
	return viu
}

// SetCustomData sets the "custom_data" field.
func (viu *VersionInfoUpdate) SetCustomData(s string) *VersionInfoUpdate {
	viu.mutation.SetCustomData(s)
	return viu
}

// SetNillableCustomData sets the "custom_data" field if the given value is not nil.
func (viu *VersionInfoUpdate) SetNillableCustomData(s *string) *VersionInfoUpdate {
	if s != nil {
		viu.SetCustomData(*s)
	}
	return viu
}

// SetCreatedAt sets the "created_at" field.
func (viu *VersionInfoUpdate) SetCreatedAt(t time.Time) *VersionInfoUpdate {
	viu.mutation.SetCreatedAt(t)
	return viu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (viu *VersionInfoUpdate) SetNillableCreatedAt(t *time.Time) *VersionInfoUpdate {
	if t != nil {
		viu.SetCreatedAt(*t)
	}
	return viu
}

// Mutation returns the VersionInfoMutation object of the builder.
func (viu *VersionInfoUpdate) Mutation() *VersionInfoMutation {
	return viu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (viu *VersionInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, viu.sqlSave, viu.mutation, viu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (viu *VersionInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := viu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (viu *VersionInfoUpdate) Exec(ctx context.Context) error {
	_, err := viu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (viu *VersionInfoUpdate) ExecX(ctx context.Context) {
	if err := viu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (viu *VersionInfoUpdate) check() error {
	if v, ok := viu.mutation.VersionName(); ok {
		if err := versioninfo.VersionNameValidator(v); err != nil {
			return &ValidationError{Name: "version_name", err: fmt.Errorf(`ent: validator failed for field "VersionInfo.version_name": %w`, err)}
		}
	}
	return nil
}

func (viu *VersionInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := viu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(versioninfo.Table, versioninfo.Columns, sqlgraph.NewFieldSpec(versioninfo.FieldID, field.TypeInt))
	if ps := viu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := viu.mutation.VersionName(); ok {
		_spec.SetField(versioninfo.FieldVersionName, field.TypeString, value)
	}
	if value, ok := viu.mutation.ReleaseNote(); ok {
		_spec.SetField(versioninfo.FieldReleaseNote, field.TypeString, value)
	}
	if value, ok := viu.mutation.CustomData(); ok {
		_spec.SetField(versioninfo.FieldCustomData, field.TypeString, value)
	}
	if value, ok := viu.mutation.CreatedAt(); ok {
		_spec.SetField(versioninfo.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, viu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{versioninfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	viu.mutation.done = true
	return n, nil
}

// VersionInfoUpdateOne is the builder for updating a single VersionInfo entity.
type VersionInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VersionInfoMutation
}

// SetVersionName sets the "version_name" field.
func (viuo *VersionInfoUpdateOne) SetVersionName(s string) *VersionInfoUpdateOne {
	viuo.mutation.SetVersionName(s)
	return viuo
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (viuo *VersionInfoUpdateOne) SetNillableVersionName(s *string) *VersionInfoUpdateOne {
	if s != nil {
		viuo.SetVersionName(*s)
	}
	return viuo
}

// SetReleaseNote sets the "release_note" field.
func (viuo *VersionInfoUpdateOne) SetReleaseNote(s string) *VersionInfoUpdateOne {
	viuo.mutation.SetReleaseNote(s)
	return viuo
}

// SetNillableReleaseNote sets the "release_note" field if the given value is not nil.
func (viuo *VersionInfoUpdateOne) SetNillableReleaseNote(s *string) *VersionInfoUpdateOne {
	if s != nil {
		viuo.SetReleaseNote(*s)
	}
	return viuo
}

// SetCustomData sets the "custom_data" field.
func (viuo *VersionInfoUpdateOne) SetCustomData(s string) *VersionInfoUpdateOne {
	viuo.mutation.SetCustomData(s)
	return viuo
}

// SetNillableCustomData sets the "custom_data" field if the given value is not nil.
func (viuo *VersionInfoUpdateOne) SetNillableCustomData(s *string) *VersionInfoUpdateOne {
	if s != nil {
		viuo.SetCustomData(*s)
	}
	return viuo
}

// SetCreatedAt sets the "created_at" field.
func (viuo *VersionInfoUpdateOne) SetCreatedAt(t time.Time) *VersionInfoUpdateOne {
	viuo.mutation.SetCreatedAt(t)
	return viuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (viuo *VersionInfoUpdateOne) SetNillableCreatedAt(t *time.Time) *VersionInfoUpdateOne {
	if t != nil {
		viuo.SetCreatedAt(*t)
	}
	return viuo
}

// Mutation returns the VersionInfoMutation object of the builder.
func (viuo *VersionInfoUpdateOne) Mutation() *VersionInfoMutation {
	return viuo.mutation
}

// Where appends a list predicates to the VersionInfoUpdate builder.
func (viuo *VersionInfoUpdateOne) Where(ps ...predicate.VersionInfo) *VersionInfoUpdateOne {
	viuo.mutation.Where(ps...)
	return viuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (viuo *VersionInfoUpdateOne) Select(field string, fields ...string) *VersionInfoUpdateOne {
	viuo.fields = append([]string{field}, fields...)
	return viuo
}

// Save executes the query and returns the updated VersionInfo entity.
func (viuo *VersionInfoUpdateOne) Save(ctx context.Context) (*VersionInfo, error) {
	return withHooks(ctx, viuo.sqlSave, viuo.mutation, viuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (viuo *VersionInfoUpdateOne) SaveX(ctx context.Context) *VersionInfo {
	node, err := viuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (viuo *VersionInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := viuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (viuo *VersionInfoUpdateOne) ExecX(ctx context.Context) {
	if err := viuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (viuo *VersionInfoUpdateOne) check() error {
	if v, ok := viuo.mutation.VersionName(); ok {
		if err := versioninfo.VersionNameValidator(v); err != nil {
			return &ValidationError{Name: "version_name", err: fmt.Errorf(`ent: validator failed for field "VersionInfo.version_name": %w`, err)}
		}
	}
	return nil
}

func (viuo *VersionInfoUpdateOne) sqlSave(ctx context.Context) (_node *VersionInfo, err error) {
	if err := viuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(versioninfo.Table, versioninfo.Columns, sqlgraph.NewFieldSpec(versioninfo.FieldID, field.TypeInt))
	id, ok := viuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VersionInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := viuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, versioninfo.FieldID)
		for _, f := range fields {
			if !versioninfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != versioninfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := viuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := viuo.mutation.VersionName(); ok {
		_spec.SetField(versioninfo.FieldVersionName, field.TypeString, value)
	}
	if value, ok := viuo.mutation.ReleaseNote(); ok {
		_spec.SetField(versioninfo.FieldReleaseNote, field.TypeString, value)
	}
	if value, ok := viuo.mutation.CustomData(); ok {
		_spec.SetField(versioninfo.FieldCustomData, field.TypeString, value)
	}
	if value, ok := viuo.mutation.CreatedAt(); ok {
		_spec.SetField(versioninfo.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &VersionInfo{config: viuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, viuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{versioninfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	viuo.mutation.done = true
	return _node, nil
}
