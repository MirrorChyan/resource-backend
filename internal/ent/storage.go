// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/MirrorChyan/resource-backend/internal/ent/storage"
	"github.com/MirrorChyan/resource-backend/internal/ent/version"
)

// Storage is the model entity for the Storage schema.
type Storage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UpdateType holds the value of the "update_type" field.
	UpdateType storage.UpdateType `json:"update_type,omitempty"`
	// Os holds the value of the "os" field.
	Os string `json:"os,omitempty"`
	// Arch holds the value of the "arch" field.
	Arch string `json:"arch,omitempty"`
	// PackagePath holds the value of the "package_path" field.
	PackagePath string `json:"package_path,omitempty"`
	// PackageHashSha256 holds the value of the "package_hash_sha256" field.
	PackageHashSha256 string `json:"package_hash_sha256,omitempty"`
	// only for full update
	ResourcePath string `json:"resource_path,omitempty"`
	// only for full update
	FileHashes map[string]string `json:"file_hashes,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StorageQuery when eager-loading is set.
	Edges               StorageEdges `json:"edges"`
	storage_old_version *int
	version_storages    *int
	selectValues        sql.SelectValues
}

// StorageEdges holds the relations/edges for other nodes in the graph.
type StorageEdges struct {
	// Version holds the value of the version edge.
	Version *Version `json:"version,omitempty"`
	// only for incremental update
	OldVersion *Version `json:"old_version,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VersionOrErr returns the Version value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StorageEdges) VersionOrErr() (*Version, error) {
	if e.Version != nil {
		return e.Version, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: version.Label}
	}
	return nil, &NotLoadedError{edge: "version"}
}

// OldVersionOrErr returns the OldVersion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StorageEdges) OldVersionOrErr() (*Version, error) {
	if e.OldVersion != nil {
		return e.OldVersion, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: version.Label}
	}
	return nil, &NotLoadedError{edge: "old_version"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Storage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case storage.FieldFileHashes:
			values[i] = new([]byte)
		case storage.FieldID:
			values[i] = new(sql.NullInt64)
		case storage.FieldUpdateType, storage.FieldOs, storage.FieldArch, storage.FieldPackagePath, storage.FieldPackageHashSha256, storage.FieldResourcePath:
			values[i] = new(sql.NullString)
		case storage.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case storage.ForeignKeys[0]: // storage_old_version
			values[i] = new(sql.NullInt64)
		case storage.ForeignKeys[1]: // version_storages
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Storage fields.
func (s *Storage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case storage.FieldUpdateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_type", values[i])
			} else if value.Valid {
				s.UpdateType = storage.UpdateType(value.String)
			}
		case storage.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				s.Os = value.String
			}
		case storage.FieldArch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arch", values[i])
			} else if value.Valid {
				s.Arch = value.String
			}
		case storage.FieldPackagePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_path", values[i])
			} else if value.Valid {
				s.PackagePath = value.String
			}
		case storage.FieldPackageHashSha256:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_hash_sha256", values[i])
			} else if value.Valid {
				s.PackageHashSha256 = value.String
			}
		case storage.FieldResourcePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_path", values[i])
			} else if value.Valid {
				s.ResourcePath = value.String
			}
		case storage.FieldFileHashes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field file_hashes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.FileHashes); err != nil {
					return fmt.Errorf("unmarshal field file_hashes: %w", err)
				}
			}
		case storage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case storage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field storage_old_version", value)
			} else if value.Valid {
				s.storage_old_version = new(int)
				*s.storage_old_version = int(value.Int64)
			}
		case storage.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field version_storages", value)
			} else if value.Valid {
				s.version_storages = new(int)
				*s.version_storages = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Storage.
// This includes values selected through modifiers, order, etc.
func (s *Storage) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryVersion queries the "version" edge of the Storage entity.
func (s *Storage) QueryVersion() *VersionQuery {
	return NewStorageClient(s.config).QueryVersion(s)
}

// QueryOldVersion queries the "old_version" edge of the Storage entity.
func (s *Storage) QueryOldVersion() *VersionQuery {
	return NewStorageClient(s.config).QueryOldVersion(s)
}

// Update returns a builder for updating this Storage.
// Note that you need to call Storage.Unwrap() before calling this method if this Storage
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Storage) Update() *StorageUpdateOne {
	return NewStorageClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Storage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Storage) Unwrap() *Storage {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Storage is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Storage) String() string {
	var builder strings.Builder
	builder.WriteString("Storage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("update_type=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdateType))
	builder.WriteString(", ")
	builder.WriteString("os=")
	builder.WriteString(s.Os)
	builder.WriteString(", ")
	builder.WriteString("arch=")
	builder.WriteString(s.Arch)
	builder.WriteString(", ")
	builder.WriteString("package_path=")
	builder.WriteString(s.PackagePath)
	builder.WriteString(", ")
	builder.WriteString("package_hash_sha256=")
	builder.WriteString(s.PackageHashSha256)
	builder.WriteString(", ")
	builder.WriteString("resource_path=")
	builder.WriteString(s.ResourcePath)
	builder.WriteString(", ")
	builder.WriteString("file_hashes=")
	builder.WriteString(fmt.Sprintf("%v", s.FileHashes))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Storages is a parsable slice of Storage.
type Storages []*Storage
