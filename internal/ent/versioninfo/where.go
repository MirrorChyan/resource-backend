// Code generated by ent, DO NOT EDIT.

package versioninfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/MirrorChyan/resource-backend/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldLTE(FieldID, id))
}

// VersionName applies equality check predicate on the "version_name" field. It's identical to VersionNameEQ.
func VersionName(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEQ(FieldVersionName, v))
}

// ReleaseNote applies equality check predicate on the "release_note" field. It's identical to ReleaseNoteEQ.
func ReleaseNote(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEQ(FieldReleaseNote, v))
}

// CustomData applies equality check predicate on the "custom_data" field. It's identical to CustomDataEQ.
func CustomData(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEQ(FieldCustomData, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// VersionNameEQ applies the EQ predicate on the "version_name" field.
func VersionNameEQ(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEQ(FieldVersionName, v))
}

// VersionNameNEQ applies the NEQ predicate on the "version_name" field.
func VersionNameNEQ(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldNEQ(FieldVersionName, v))
}

// VersionNameIn applies the In predicate on the "version_name" field.
func VersionNameIn(vs ...string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldIn(FieldVersionName, vs...))
}

// VersionNameNotIn applies the NotIn predicate on the "version_name" field.
func VersionNameNotIn(vs ...string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldNotIn(FieldVersionName, vs...))
}

// VersionNameGT applies the GT predicate on the "version_name" field.
func VersionNameGT(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldGT(FieldVersionName, v))
}

// VersionNameGTE applies the GTE predicate on the "version_name" field.
func VersionNameGTE(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldGTE(FieldVersionName, v))
}

// VersionNameLT applies the LT predicate on the "version_name" field.
func VersionNameLT(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldLT(FieldVersionName, v))
}

// VersionNameLTE applies the LTE predicate on the "version_name" field.
func VersionNameLTE(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldLTE(FieldVersionName, v))
}

// VersionNameContains applies the Contains predicate on the "version_name" field.
func VersionNameContains(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldContains(FieldVersionName, v))
}

// VersionNameHasPrefix applies the HasPrefix predicate on the "version_name" field.
func VersionNameHasPrefix(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldHasPrefix(FieldVersionName, v))
}

// VersionNameHasSuffix applies the HasSuffix predicate on the "version_name" field.
func VersionNameHasSuffix(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldHasSuffix(FieldVersionName, v))
}

// VersionNameEqualFold applies the EqualFold predicate on the "version_name" field.
func VersionNameEqualFold(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEqualFold(FieldVersionName, v))
}

// VersionNameContainsFold applies the ContainsFold predicate on the "version_name" field.
func VersionNameContainsFold(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldContainsFold(FieldVersionName, v))
}

// ReleaseNoteEQ applies the EQ predicate on the "release_note" field.
func ReleaseNoteEQ(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEQ(FieldReleaseNote, v))
}

// ReleaseNoteNEQ applies the NEQ predicate on the "release_note" field.
func ReleaseNoteNEQ(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldNEQ(FieldReleaseNote, v))
}

// ReleaseNoteIn applies the In predicate on the "release_note" field.
func ReleaseNoteIn(vs ...string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldIn(FieldReleaseNote, vs...))
}

// ReleaseNoteNotIn applies the NotIn predicate on the "release_note" field.
func ReleaseNoteNotIn(vs ...string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldNotIn(FieldReleaseNote, vs...))
}

// ReleaseNoteGT applies the GT predicate on the "release_note" field.
func ReleaseNoteGT(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldGT(FieldReleaseNote, v))
}

// ReleaseNoteGTE applies the GTE predicate on the "release_note" field.
func ReleaseNoteGTE(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldGTE(FieldReleaseNote, v))
}

// ReleaseNoteLT applies the LT predicate on the "release_note" field.
func ReleaseNoteLT(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldLT(FieldReleaseNote, v))
}

// ReleaseNoteLTE applies the LTE predicate on the "release_note" field.
func ReleaseNoteLTE(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldLTE(FieldReleaseNote, v))
}

// ReleaseNoteContains applies the Contains predicate on the "release_note" field.
func ReleaseNoteContains(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldContains(FieldReleaseNote, v))
}

// ReleaseNoteHasPrefix applies the HasPrefix predicate on the "release_note" field.
func ReleaseNoteHasPrefix(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldHasPrefix(FieldReleaseNote, v))
}

// ReleaseNoteHasSuffix applies the HasSuffix predicate on the "release_note" field.
func ReleaseNoteHasSuffix(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldHasSuffix(FieldReleaseNote, v))
}

// ReleaseNoteEqualFold applies the EqualFold predicate on the "release_note" field.
func ReleaseNoteEqualFold(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEqualFold(FieldReleaseNote, v))
}

// ReleaseNoteContainsFold applies the ContainsFold predicate on the "release_note" field.
func ReleaseNoteContainsFold(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldContainsFold(FieldReleaseNote, v))
}

// CustomDataEQ applies the EQ predicate on the "custom_data" field.
func CustomDataEQ(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEQ(FieldCustomData, v))
}

// CustomDataNEQ applies the NEQ predicate on the "custom_data" field.
func CustomDataNEQ(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldNEQ(FieldCustomData, v))
}

// CustomDataIn applies the In predicate on the "custom_data" field.
func CustomDataIn(vs ...string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldIn(FieldCustomData, vs...))
}

// CustomDataNotIn applies the NotIn predicate on the "custom_data" field.
func CustomDataNotIn(vs ...string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldNotIn(FieldCustomData, vs...))
}

// CustomDataGT applies the GT predicate on the "custom_data" field.
func CustomDataGT(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldGT(FieldCustomData, v))
}

// CustomDataGTE applies the GTE predicate on the "custom_data" field.
func CustomDataGTE(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldGTE(FieldCustomData, v))
}

// CustomDataLT applies the LT predicate on the "custom_data" field.
func CustomDataLT(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldLT(FieldCustomData, v))
}

// CustomDataLTE applies the LTE predicate on the "custom_data" field.
func CustomDataLTE(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldLTE(FieldCustomData, v))
}

// CustomDataContains applies the Contains predicate on the "custom_data" field.
func CustomDataContains(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldContains(FieldCustomData, v))
}

// CustomDataHasPrefix applies the HasPrefix predicate on the "custom_data" field.
func CustomDataHasPrefix(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldHasPrefix(FieldCustomData, v))
}

// CustomDataHasSuffix applies the HasSuffix predicate on the "custom_data" field.
func CustomDataHasSuffix(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldHasSuffix(FieldCustomData, v))
}

// CustomDataEqualFold applies the EqualFold predicate on the "custom_data" field.
func CustomDataEqualFold(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEqualFold(FieldCustomData, v))
}

// CustomDataContainsFold applies the ContainsFold predicate on the "custom_data" field.
func CustomDataContainsFold(v string) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldContainsFold(FieldCustomData, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VersionInfo {
	return predicate.VersionInfo(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VersionInfo) predicate.VersionInfo {
	return predicate.VersionInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VersionInfo) predicate.VersionInfo {
	return predicate.VersionInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VersionInfo) predicate.VersionInfo {
	return predicate.VersionInfo(sql.NotPredicates(p))
}
