// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MirrorChyan/resource-backend/internal/ent/versioninfo"
)

// VersionInfoCreate is the builder for creating a VersionInfo entity.
type VersionInfoCreate struct {
	config
	mutation *VersionInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVersionName sets the "version_name" field.
func (vic *VersionInfoCreate) SetVersionName(s string) *VersionInfoCreate {
	vic.mutation.SetVersionName(s)
	return vic
}

// SetReleaseNote sets the "release_note" field.
func (vic *VersionInfoCreate) SetReleaseNote(s string) *VersionInfoCreate {
	vic.mutation.SetReleaseNote(s)
	return vic
}

// SetNillableReleaseNote sets the "release_note" field if the given value is not nil.
func (vic *VersionInfoCreate) SetNillableReleaseNote(s *string) *VersionInfoCreate {
	if s != nil {
		vic.SetReleaseNote(*s)
	}
	return vic
}

// SetCustomData sets the "custom_data" field.
func (vic *VersionInfoCreate) SetCustomData(s string) *VersionInfoCreate {
	vic.mutation.SetCustomData(s)
	return vic
}

// SetNillableCustomData sets the "custom_data" field if the given value is not nil.
func (vic *VersionInfoCreate) SetNillableCustomData(s *string) *VersionInfoCreate {
	if s != nil {
		vic.SetCustomData(*s)
	}
	return vic
}

// SetCreatedAt sets the "created_at" field.
func (vic *VersionInfoCreate) SetCreatedAt(t time.Time) *VersionInfoCreate {
	vic.mutation.SetCreatedAt(t)
	return vic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vic *VersionInfoCreate) SetNillableCreatedAt(t *time.Time) *VersionInfoCreate {
	if t != nil {
		vic.SetCreatedAt(*t)
	}
	return vic
}

// Mutation returns the VersionInfoMutation object of the builder.
func (vic *VersionInfoCreate) Mutation() *VersionInfoMutation {
	return vic.mutation
}

// Save creates the VersionInfo in the database.
func (vic *VersionInfoCreate) Save(ctx context.Context) (*VersionInfo, error) {
	vic.defaults()
	return withHooks(ctx, vic.sqlSave, vic.mutation, vic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vic *VersionInfoCreate) SaveX(ctx context.Context) *VersionInfo {
	v, err := vic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vic *VersionInfoCreate) Exec(ctx context.Context) error {
	_, err := vic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vic *VersionInfoCreate) ExecX(ctx context.Context) {
	if err := vic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vic *VersionInfoCreate) defaults() {
	if _, ok := vic.mutation.ReleaseNote(); !ok {
		v := versioninfo.DefaultReleaseNote
		vic.mutation.SetReleaseNote(v)
	}
	if _, ok := vic.mutation.CustomData(); !ok {
		v := versioninfo.DefaultCustomData
		vic.mutation.SetCustomData(v)
	}
	if _, ok := vic.mutation.CreatedAt(); !ok {
		v := versioninfo.DefaultCreatedAt()
		vic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vic *VersionInfoCreate) check() error {
	if _, ok := vic.mutation.VersionName(); !ok {
		return &ValidationError{Name: "version_name", err: errors.New(`ent: missing required field "VersionInfo.version_name"`)}
	}
	if v, ok := vic.mutation.VersionName(); ok {
		if err := versioninfo.VersionNameValidator(v); err != nil {
			return &ValidationError{Name: "version_name", err: fmt.Errorf(`ent: validator failed for field "VersionInfo.version_name": %w`, err)}
		}
	}
	if _, ok := vic.mutation.ReleaseNote(); !ok {
		return &ValidationError{Name: "release_note", err: errors.New(`ent: missing required field "VersionInfo.release_note"`)}
	}
	if _, ok := vic.mutation.CustomData(); !ok {
		return &ValidationError{Name: "custom_data", err: errors.New(`ent: missing required field "VersionInfo.custom_data"`)}
	}
	if _, ok := vic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VersionInfo.created_at"`)}
	}
	return nil
}

func (vic *VersionInfoCreate) sqlSave(ctx context.Context) (*VersionInfo, error) {
	if err := vic.check(); err != nil {
		return nil, err
	}
	_node, _spec := vic.createSpec()
	if err := sqlgraph.CreateNode(ctx, vic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vic.mutation.id = &_node.ID
	vic.mutation.done = true
	return _node, nil
}

func (vic *VersionInfoCreate) createSpec() (*VersionInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &VersionInfo{config: vic.config}
		_spec = sqlgraph.NewCreateSpec(versioninfo.Table, sqlgraph.NewFieldSpec(versioninfo.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vic.conflict
	if value, ok := vic.mutation.VersionName(); ok {
		_spec.SetField(versioninfo.FieldVersionName, field.TypeString, value)
		_node.VersionName = value
	}
	if value, ok := vic.mutation.ReleaseNote(); ok {
		_spec.SetField(versioninfo.FieldReleaseNote, field.TypeString, value)
		_node.ReleaseNote = value
	}
	if value, ok := vic.mutation.CustomData(); ok {
		_spec.SetField(versioninfo.FieldCustomData, field.TypeString, value)
		_node.CustomData = value
	}
	if value, ok := vic.mutation.CreatedAt(); ok {
		_spec.SetField(versioninfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VersionInfo.Create().
//		SetVersionName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VersionInfoUpsert) {
//			SetVersionName(v+v).
//		}).
//		Exec(ctx)
func (vic *VersionInfoCreate) OnConflict(opts ...sql.ConflictOption) *VersionInfoUpsertOne {
	vic.conflict = opts
	return &VersionInfoUpsertOne{
		create: vic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VersionInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vic *VersionInfoCreate) OnConflictColumns(columns ...string) *VersionInfoUpsertOne {
	vic.conflict = append(vic.conflict, sql.ConflictColumns(columns...))
	return &VersionInfoUpsertOne{
		create: vic,
	}
}

type (
	// VersionInfoUpsertOne is the builder for "upsert"-ing
	//  one VersionInfo node.
	VersionInfoUpsertOne struct {
		create *VersionInfoCreate
	}

	// VersionInfoUpsert is the "OnConflict" setter.
	VersionInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetVersionName sets the "version_name" field.
func (u *VersionInfoUpsert) SetVersionName(v string) *VersionInfoUpsert {
	u.Set(versioninfo.FieldVersionName, v)
	return u
}

// UpdateVersionName sets the "version_name" field to the value that was provided on create.
func (u *VersionInfoUpsert) UpdateVersionName() *VersionInfoUpsert {
	u.SetExcluded(versioninfo.FieldVersionName)
	return u
}

// SetReleaseNote sets the "release_note" field.
func (u *VersionInfoUpsert) SetReleaseNote(v string) *VersionInfoUpsert {
	u.Set(versioninfo.FieldReleaseNote, v)
	return u
}

// UpdateReleaseNote sets the "release_note" field to the value that was provided on create.
func (u *VersionInfoUpsert) UpdateReleaseNote() *VersionInfoUpsert {
	u.SetExcluded(versioninfo.FieldReleaseNote)
	return u
}

// SetCustomData sets the "custom_data" field.
func (u *VersionInfoUpsert) SetCustomData(v string) *VersionInfoUpsert {
	u.Set(versioninfo.FieldCustomData, v)
	return u
}

// UpdateCustomData sets the "custom_data" field to the value that was provided on create.
func (u *VersionInfoUpsert) UpdateCustomData() *VersionInfoUpsert {
	u.SetExcluded(versioninfo.FieldCustomData)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *VersionInfoUpsert) SetCreatedAt(v time.Time) *VersionInfoUpsert {
	u.Set(versioninfo.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VersionInfoUpsert) UpdateCreatedAt() *VersionInfoUpsert {
	u.SetExcluded(versioninfo.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.VersionInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VersionInfoUpsertOne) UpdateNewValues() *VersionInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VersionInfo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VersionInfoUpsertOne) Ignore() *VersionInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VersionInfoUpsertOne) DoNothing() *VersionInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VersionInfoCreate.OnConflict
// documentation for more info.
func (u *VersionInfoUpsertOne) Update(set func(*VersionInfoUpsert)) *VersionInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VersionInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetVersionName sets the "version_name" field.
func (u *VersionInfoUpsertOne) SetVersionName(v string) *VersionInfoUpsertOne {
	return u.Update(func(s *VersionInfoUpsert) {
		s.SetVersionName(v)
	})
}

// UpdateVersionName sets the "version_name" field to the value that was provided on create.
func (u *VersionInfoUpsertOne) UpdateVersionName() *VersionInfoUpsertOne {
	return u.Update(func(s *VersionInfoUpsert) {
		s.UpdateVersionName()
	})
}

// SetReleaseNote sets the "release_note" field.
func (u *VersionInfoUpsertOne) SetReleaseNote(v string) *VersionInfoUpsertOne {
	return u.Update(func(s *VersionInfoUpsert) {
		s.SetReleaseNote(v)
	})
}

// UpdateReleaseNote sets the "release_note" field to the value that was provided on create.
func (u *VersionInfoUpsertOne) UpdateReleaseNote() *VersionInfoUpsertOne {
	return u.Update(func(s *VersionInfoUpsert) {
		s.UpdateReleaseNote()
	})
}

// SetCustomData sets the "custom_data" field.
func (u *VersionInfoUpsertOne) SetCustomData(v string) *VersionInfoUpsertOne {
	return u.Update(func(s *VersionInfoUpsert) {
		s.SetCustomData(v)
	})
}

// UpdateCustomData sets the "custom_data" field to the value that was provided on create.
func (u *VersionInfoUpsertOne) UpdateCustomData() *VersionInfoUpsertOne {
	return u.Update(func(s *VersionInfoUpsert) {
		s.UpdateCustomData()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *VersionInfoUpsertOne) SetCreatedAt(v time.Time) *VersionInfoUpsertOne {
	return u.Update(func(s *VersionInfoUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VersionInfoUpsertOne) UpdateCreatedAt() *VersionInfoUpsertOne {
	return u.Update(func(s *VersionInfoUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *VersionInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VersionInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VersionInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VersionInfoUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VersionInfoUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VersionInfoCreateBulk is the builder for creating many VersionInfo entities in bulk.
type VersionInfoCreateBulk struct {
	config
	err      error
	builders []*VersionInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the VersionInfo entities in the database.
func (vicb *VersionInfoCreateBulk) Save(ctx context.Context) ([]*VersionInfo, error) {
	if vicb.err != nil {
		return nil, vicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vicb.builders))
	nodes := make([]*VersionInfo, len(vicb.builders))
	mutators := make([]Mutator, len(vicb.builders))
	for i := range vicb.builders {
		func(i int, root context.Context) {
			builder := vicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VersionInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vicb *VersionInfoCreateBulk) SaveX(ctx context.Context) []*VersionInfo {
	v, err := vicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vicb *VersionInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := vicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vicb *VersionInfoCreateBulk) ExecX(ctx context.Context) {
	if err := vicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VersionInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VersionInfoUpsert) {
//			SetVersionName(v+v).
//		}).
//		Exec(ctx)
func (vicb *VersionInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *VersionInfoUpsertBulk {
	vicb.conflict = opts
	return &VersionInfoUpsertBulk{
		create: vicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VersionInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vicb *VersionInfoCreateBulk) OnConflictColumns(columns ...string) *VersionInfoUpsertBulk {
	vicb.conflict = append(vicb.conflict, sql.ConflictColumns(columns...))
	return &VersionInfoUpsertBulk{
		create: vicb,
	}
}

// VersionInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of VersionInfo nodes.
type VersionInfoUpsertBulk struct {
	create *VersionInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VersionInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VersionInfoUpsertBulk) UpdateNewValues() *VersionInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VersionInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VersionInfoUpsertBulk) Ignore() *VersionInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VersionInfoUpsertBulk) DoNothing() *VersionInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VersionInfoCreateBulk.OnConflict
// documentation for more info.
func (u *VersionInfoUpsertBulk) Update(set func(*VersionInfoUpsert)) *VersionInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VersionInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetVersionName sets the "version_name" field.
func (u *VersionInfoUpsertBulk) SetVersionName(v string) *VersionInfoUpsertBulk {
	return u.Update(func(s *VersionInfoUpsert) {
		s.SetVersionName(v)
	})
}

// UpdateVersionName sets the "version_name" field to the value that was provided on create.
func (u *VersionInfoUpsertBulk) UpdateVersionName() *VersionInfoUpsertBulk {
	return u.Update(func(s *VersionInfoUpsert) {
		s.UpdateVersionName()
	})
}

// SetReleaseNote sets the "release_note" field.
func (u *VersionInfoUpsertBulk) SetReleaseNote(v string) *VersionInfoUpsertBulk {
	return u.Update(func(s *VersionInfoUpsert) {
		s.SetReleaseNote(v)
	})
}

// UpdateReleaseNote sets the "release_note" field to the value that was provided on create.
func (u *VersionInfoUpsertBulk) UpdateReleaseNote() *VersionInfoUpsertBulk {
	return u.Update(func(s *VersionInfoUpsert) {
		s.UpdateReleaseNote()
	})
}

// SetCustomData sets the "custom_data" field.
func (u *VersionInfoUpsertBulk) SetCustomData(v string) *VersionInfoUpsertBulk {
	return u.Update(func(s *VersionInfoUpsert) {
		s.SetCustomData(v)
	})
}

// UpdateCustomData sets the "custom_data" field to the value that was provided on create.
func (u *VersionInfoUpsertBulk) UpdateCustomData() *VersionInfoUpsertBulk {
	return u.Update(func(s *VersionInfoUpsert) {
		s.UpdateCustomData()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *VersionInfoUpsertBulk) SetCreatedAt(v time.Time) *VersionInfoUpsertBulk {
	return u.Update(func(s *VersionInfoUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VersionInfoUpsertBulk) UpdateCreatedAt() *VersionInfoUpsertBulk {
	return u.Update(func(s *VersionInfoUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *VersionInfoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VersionInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VersionInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VersionInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
