// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MirrorChyan/resource-backend/internal/ent/versioninfo"
)

// VersionInfoCreate is the builder for creating a VersionInfo entity.
type VersionInfoCreate struct {
	config
	mutation *VersionInfoMutation
	hooks    []Hook
}

// SetVersionName sets the "version_name" field.
func (vic *VersionInfoCreate) SetVersionName(s string) *VersionInfoCreate {
	vic.mutation.SetVersionName(s)
	return vic
}

// SetReleaseNote sets the "release_note" field.
func (vic *VersionInfoCreate) SetReleaseNote(s string) *VersionInfoCreate {
	vic.mutation.SetReleaseNote(s)
	return vic
}

// SetNillableReleaseNote sets the "release_note" field if the given value is not nil.
func (vic *VersionInfoCreate) SetNillableReleaseNote(s *string) *VersionInfoCreate {
	if s != nil {
		vic.SetReleaseNote(*s)
	}
	return vic
}

// SetCustomData sets the "custom_data" field.
func (vic *VersionInfoCreate) SetCustomData(s string) *VersionInfoCreate {
	vic.mutation.SetCustomData(s)
	return vic
}

// SetNillableCustomData sets the "custom_data" field if the given value is not nil.
func (vic *VersionInfoCreate) SetNillableCustomData(s *string) *VersionInfoCreate {
	if s != nil {
		vic.SetCustomData(*s)
	}
	return vic
}

// SetCreatedAt sets the "created_at" field.
func (vic *VersionInfoCreate) SetCreatedAt(t time.Time) *VersionInfoCreate {
	vic.mutation.SetCreatedAt(t)
	return vic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vic *VersionInfoCreate) SetNillableCreatedAt(t *time.Time) *VersionInfoCreate {
	if t != nil {
		vic.SetCreatedAt(*t)
	}
	return vic
}

// Mutation returns the VersionInfoMutation object of the builder.
func (vic *VersionInfoCreate) Mutation() *VersionInfoMutation {
	return vic.mutation
}

// Save creates the VersionInfo in the database.
func (vic *VersionInfoCreate) Save(ctx context.Context) (*VersionInfo, error) {
	vic.defaults()
	return withHooks(ctx, vic.sqlSave, vic.mutation, vic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vic *VersionInfoCreate) SaveX(ctx context.Context) *VersionInfo {
	v, err := vic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vic *VersionInfoCreate) Exec(ctx context.Context) error {
	_, err := vic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vic *VersionInfoCreate) ExecX(ctx context.Context) {
	if err := vic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vic *VersionInfoCreate) defaults() {
	if _, ok := vic.mutation.ReleaseNote(); !ok {
		v := versioninfo.DefaultReleaseNote
		vic.mutation.SetReleaseNote(v)
	}
	if _, ok := vic.mutation.CustomData(); !ok {
		v := versioninfo.DefaultCustomData
		vic.mutation.SetCustomData(v)
	}
	if _, ok := vic.mutation.CreatedAt(); !ok {
		v := versioninfo.DefaultCreatedAt()
		vic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vic *VersionInfoCreate) check() error {
	if _, ok := vic.mutation.VersionName(); !ok {
		return &ValidationError{Name: "version_name", err: errors.New(`ent: missing required field "VersionInfo.version_name"`)}
	}
	if v, ok := vic.mutation.VersionName(); ok {
		if err := versioninfo.VersionNameValidator(v); err != nil {
			return &ValidationError{Name: "version_name", err: fmt.Errorf(`ent: validator failed for field "VersionInfo.version_name": %w`, err)}
		}
	}
	if _, ok := vic.mutation.ReleaseNote(); !ok {
		return &ValidationError{Name: "release_note", err: errors.New(`ent: missing required field "VersionInfo.release_note"`)}
	}
	if _, ok := vic.mutation.CustomData(); !ok {
		return &ValidationError{Name: "custom_data", err: errors.New(`ent: missing required field "VersionInfo.custom_data"`)}
	}
	if _, ok := vic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VersionInfo.created_at"`)}
	}
	return nil
}

func (vic *VersionInfoCreate) sqlSave(ctx context.Context) (*VersionInfo, error) {
	if err := vic.check(); err != nil {
		return nil, err
	}
	_node, _spec := vic.createSpec()
	if err := sqlgraph.CreateNode(ctx, vic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vic.mutation.id = &_node.ID
	vic.mutation.done = true
	return _node, nil
}

func (vic *VersionInfoCreate) createSpec() (*VersionInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &VersionInfo{config: vic.config}
		_spec = sqlgraph.NewCreateSpec(versioninfo.Table, sqlgraph.NewFieldSpec(versioninfo.FieldID, field.TypeInt))
	)
	if value, ok := vic.mutation.VersionName(); ok {
		_spec.SetField(versioninfo.FieldVersionName, field.TypeString, value)
		_node.VersionName = value
	}
	if value, ok := vic.mutation.ReleaseNote(); ok {
		_spec.SetField(versioninfo.FieldReleaseNote, field.TypeString, value)
		_node.ReleaseNote = value
	}
	if value, ok := vic.mutation.CustomData(); ok {
		_spec.SetField(versioninfo.FieldCustomData, field.TypeString, value)
		_node.CustomData = value
	}
	if value, ok := vic.mutation.CreatedAt(); ok {
		_spec.SetField(versioninfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// VersionInfoCreateBulk is the builder for creating many VersionInfo entities in bulk.
type VersionInfoCreateBulk struct {
	config
	err      error
	builders []*VersionInfoCreate
}

// Save creates the VersionInfo entities in the database.
func (vicb *VersionInfoCreateBulk) Save(ctx context.Context) ([]*VersionInfo, error) {
	if vicb.err != nil {
		return nil, vicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vicb.builders))
	nodes := make([]*VersionInfo, len(vicb.builders))
	mutators := make([]Mutator, len(vicb.builders))
	for i := range vicb.builders {
		func(i int, root context.Context) {
			builder := vicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VersionInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vicb *VersionInfoCreateBulk) SaveX(ctx context.Context) []*VersionInfo {
	v, err := vicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vicb *VersionInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := vicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vicb *VersionInfoCreateBulk) ExecX(ctx context.Context) {
	if err := vicb.Exec(ctx); err != nil {
		panic(err)
	}
}
