// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/MirrorChyan/resource-backend/internal/ent/latestversion"
	"github.com/MirrorChyan/resource-backend/internal/ent/predicate"
	"github.com/MirrorChyan/resource-backend/internal/ent/resource"
	"github.com/MirrorChyan/resource-backend/internal/ent/storage"
	"github.com/MirrorChyan/resource-backend/internal/ent/version"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLatestVersion = "LatestVersion"
	TypeResource      = "Resource"
	TypeStorage       = "Storage"
	TypeVersion       = "Version"
)

// LatestVersionMutation represents an operation that mutates the LatestVersion nodes in the graph.
type LatestVersionMutation struct {
	config
	op              Op
	typ             string
	id              *int
	channel         *latestversion.Channel
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	resource        *string
	clearedresource bool
	version         *int
	clearedversion  bool
	done            bool
	oldValue        func(context.Context) (*LatestVersion, error)
	predicates      []predicate.LatestVersion
}

var _ ent.Mutation = (*LatestVersionMutation)(nil)

// latestversionOption allows management of the mutation configuration using functional options.
type latestversionOption func(*LatestVersionMutation)

// newLatestVersionMutation creates new mutation for the LatestVersion entity.
func newLatestVersionMutation(c config, op Op, opts ...latestversionOption) *LatestVersionMutation {
	m := &LatestVersionMutation{
		config:        c,
		op:            op,
		typ:           TypeLatestVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLatestVersionID sets the ID field of the mutation.
func withLatestVersionID(id int) latestversionOption {
	return func(m *LatestVersionMutation) {
		var (
			err   error
			once  sync.Once
			value *LatestVersion
		)
		m.oldValue = func(ctx context.Context) (*LatestVersion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LatestVersion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLatestVersion sets the old LatestVersion of the mutation.
func withLatestVersion(node *LatestVersion) latestversionOption {
	return func(m *LatestVersionMutation) {
		m.oldValue = func(context.Context) (*LatestVersion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LatestVersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LatestVersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LatestVersionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LatestVersionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LatestVersion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChannel sets the "channel" field.
func (m *LatestVersionMutation) SetChannel(l latestversion.Channel) {
	m.channel = &l
}

// Channel returns the value of the "channel" field in the mutation.
func (m *LatestVersionMutation) Channel() (r latestversion.Channel, exists bool) {
	v := m.channel
	if v == nil {
		return
	}
	return *v, true
}

// OldChannel returns the old "channel" field's value of the LatestVersion entity.
// If the LatestVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LatestVersionMutation) OldChannel(ctx context.Context) (v latestversion.Channel, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannel: %w", err)
	}
	return oldValue.Channel, nil
}

// ResetChannel resets all changes to the "channel" field.
func (m *LatestVersionMutation) ResetChannel() {
	m.channel = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LatestVersionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LatestVersionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the LatestVersion entity.
// If the LatestVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LatestVersionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LatestVersionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetResourceID sets the "resource" edge to the Resource entity by id.
func (m *LatestVersionMutation) SetResourceID(id string) {
	m.resource = &id
}

// ClearResource clears the "resource" edge to the Resource entity.
func (m *LatestVersionMutation) ClearResource() {
	m.clearedresource = true
}

// ResourceCleared reports if the "resource" edge to the Resource entity was cleared.
func (m *LatestVersionMutation) ResourceCleared() bool {
	return m.clearedresource
}

// ResourceID returns the "resource" edge ID in the mutation.
func (m *LatestVersionMutation) ResourceID() (id string, exists bool) {
	if m.resource != nil {
		return *m.resource, true
	}
	return
}

// ResourceIDs returns the "resource" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ResourceID instead. It exists only for internal usage by the builders.
func (m *LatestVersionMutation) ResourceIDs() (ids []string) {
	if id := m.resource; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetResource resets all changes to the "resource" edge.
func (m *LatestVersionMutation) ResetResource() {
	m.resource = nil
	m.clearedresource = false
}

// SetVersionID sets the "version" edge to the Version entity by id.
func (m *LatestVersionMutation) SetVersionID(id int) {
	m.version = &id
}

// ClearVersion clears the "version" edge to the Version entity.
func (m *LatestVersionMutation) ClearVersion() {
	m.clearedversion = true
}

// VersionCleared reports if the "version" edge to the Version entity was cleared.
func (m *LatestVersionMutation) VersionCleared() bool {
	return m.clearedversion
}

// VersionID returns the "version" edge ID in the mutation.
func (m *LatestVersionMutation) VersionID() (id int, exists bool) {
	if m.version != nil {
		return *m.version, true
	}
	return
}

// VersionIDs returns the "version" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VersionID instead. It exists only for internal usage by the builders.
func (m *LatestVersionMutation) VersionIDs() (ids []int) {
	if id := m.version; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVersion resets all changes to the "version" edge.
func (m *LatestVersionMutation) ResetVersion() {
	m.version = nil
	m.clearedversion = false
}

// Where appends a list predicates to the LatestVersionMutation builder.
func (m *LatestVersionMutation) Where(ps ...predicate.LatestVersion) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LatestVersionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LatestVersionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LatestVersion, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LatestVersionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LatestVersionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LatestVersion).
func (m *LatestVersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LatestVersionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.channel != nil {
		fields = append(fields, latestversion.FieldChannel)
	}
	if m.updated_at != nil {
		fields = append(fields, latestversion.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LatestVersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case latestversion.FieldChannel:
		return m.Channel()
	case latestversion.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LatestVersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case latestversion.FieldChannel:
		return m.OldChannel(ctx)
	case latestversion.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown LatestVersion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LatestVersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case latestversion.FieldChannel:
		v, ok := value.(latestversion.Channel)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannel(v)
		return nil
	case latestversion.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown LatestVersion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LatestVersionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LatestVersionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LatestVersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LatestVersion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LatestVersionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LatestVersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LatestVersionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LatestVersion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LatestVersionMutation) ResetField(name string) error {
	switch name {
	case latestversion.FieldChannel:
		m.ResetChannel()
		return nil
	case latestversion.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown LatestVersion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LatestVersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.resource != nil {
		edges = append(edges, latestversion.EdgeResource)
	}
	if m.version != nil {
		edges = append(edges, latestversion.EdgeVersion)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LatestVersionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case latestversion.EdgeResource:
		if id := m.resource; id != nil {
			return []ent.Value{*id}
		}
	case latestversion.EdgeVersion:
		if id := m.version; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LatestVersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LatestVersionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LatestVersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedresource {
		edges = append(edges, latestversion.EdgeResource)
	}
	if m.clearedversion {
		edges = append(edges, latestversion.EdgeVersion)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LatestVersionMutation) EdgeCleared(name string) bool {
	switch name {
	case latestversion.EdgeResource:
		return m.clearedresource
	case latestversion.EdgeVersion:
		return m.clearedversion
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LatestVersionMutation) ClearEdge(name string) error {
	switch name {
	case latestversion.EdgeResource:
		m.ClearResource()
		return nil
	case latestversion.EdgeVersion:
		m.ClearVersion()
		return nil
	}
	return fmt.Errorf("unknown LatestVersion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LatestVersionMutation) ResetEdge(name string) error {
	switch name {
	case latestversion.EdgeResource:
		m.ResetResource()
		return nil
	case latestversion.EdgeVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("unknown LatestVersion edge %s", name)
}

// ResourceMutation represents an operation that mutates the Resource nodes in the graph.
type ResourceMutation struct {
	config
	op                     Op
	typ                    string
	id                     *string
	name                   *string
	description            *string
	created_at             *time.Time
	clearedFields          map[string]struct{}
	versions               map[int]struct{}
	removedversions        map[int]struct{}
	clearedversions        bool
	latest_versions        map[int]struct{}
	removedlatest_versions map[int]struct{}
	clearedlatest_versions bool
	done                   bool
	oldValue               func(context.Context) (*Resource, error)
	predicates             []predicate.Resource
}

var _ ent.Mutation = (*ResourceMutation)(nil)

// resourceOption allows management of the mutation configuration using functional options.
type resourceOption func(*ResourceMutation)

// newResourceMutation creates new mutation for the Resource entity.
func newResourceMutation(c config, op Op, opts ...resourceOption) *ResourceMutation {
	m := &ResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withResourceID sets the ID field of the mutation.
func withResourceID(id string) resourceOption {
	return func(m *ResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *Resource
		)
		m.oldValue = func(ctx context.Context) (*Resource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Resource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withResource sets the old Resource of the mutation.
func withResource(node *Resource) resourceOption {
	return func(m *ResourceMutation) {
		m.oldValue = func(context.Context) (*Resource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Resource entities.
func (m *ResourceMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ResourceMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ResourceMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Resource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ResourceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ResourceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ResourceMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ResourceMutation) ResetDescription() {
	m.description = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ResourceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ResourceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ResourceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddVersionIDs adds the "versions" edge to the Version entity by ids.
func (m *ResourceMutation) AddVersionIDs(ids ...int) {
	if m.versions == nil {
		m.versions = make(map[int]struct{})
	}
	for i := range ids {
		m.versions[ids[i]] = struct{}{}
	}
}

// ClearVersions clears the "versions" edge to the Version entity.
func (m *ResourceMutation) ClearVersions() {
	m.clearedversions = true
}

// VersionsCleared reports if the "versions" edge to the Version entity was cleared.
func (m *ResourceMutation) VersionsCleared() bool {
	return m.clearedversions
}

// RemoveVersionIDs removes the "versions" edge to the Version entity by IDs.
func (m *ResourceMutation) RemoveVersionIDs(ids ...int) {
	if m.removedversions == nil {
		m.removedversions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.versions, ids[i])
		m.removedversions[ids[i]] = struct{}{}
	}
}

// RemovedVersions returns the removed IDs of the "versions" edge to the Version entity.
func (m *ResourceMutation) RemovedVersionsIDs() (ids []int) {
	for id := range m.removedversions {
		ids = append(ids, id)
	}
	return
}

// VersionsIDs returns the "versions" edge IDs in the mutation.
func (m *ResourceMutation) VersionsIDs() (ids []int) {
	for id := range m.versions {
		ids = append(ids, id)
	}
	return
}

// ResetVersions resets all changes to the "versions" edge.
func (m *ResourceMutation) ResetVersions() {
	m.versions = nil
	m.clearedversions = false
	m.removedversions = nil
}

// AddLatestVersionIDs adds the "latest_versions" edge to the LatestVersion entity by ids.
func (m *ResourceMutation) AddLatestVersionIDs(ids ...int) {
	if m.latest_versions == nil {
		m.latest_versions = make(map[int]struct{})
	}
	for i := range ids {
		m.latest_versions[ids[i]] = struct{}{}
	}
}

// ClearLatestVersions clears the "latest_versions" edge to the LatestVersion entity.
func (m *ResourceMutation) ClearLatestVersions() {
	m.clearedlatest_versions = true
}

// LatestVersionsCleared reports if the "latest_versions" edge to the LatestVersion entity was cleared.
func (m *ResourceMutation) LatestVersionsCleared() bool {
	return m.clearedlatest_versions
}

// RemoveLatestVersionIDs removes the "latest_versions" edge to the LatestVersion entity by IDs.
func (m *ResourceMutation) RemoveLatestVersionIDs(ids ...int) {
	if m.removedlatest_versions == nil {
		m.removedlatest_versions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.latest_versions, ids[i])
		m.removedlatest_versions[ids[i]] = struct{}{}
	}
}

// RemovedLatestVersions returns the removed IDs of the "latest_versions" edge to the LatestVersion entity.
func (m *ResourceMutation) RemovedLatestVersionsIDs() (ids []int) {
	for id := range m.removedlatest_versions {
		ids = append(ids, id)
	}
	return
}

// LatestVersionsIDs returns the "latest_versions" edge IDs in the mutation.
func (m *ResourceMutation) LatestVersionsIDs() (ids []int) {
	for id := range m.latest_versions {
		ids = append(ids, id)
	}
	return
}

// ResetLatestVersions resets all changes to the "latest_versions" edge.
func (m *ResourceMutation) ResetLatestVersions() {
	m.latest_versions = nil
	m.clearedlatest_versions = false
	m.removedlatest_versions = nil
}

// Where appends a list predicates to the ResourceMutation builder.
func (m *ResourceMutation) Where(ps ...predicate.Resource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Resource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Resource).
func (m *ResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ResourceMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, resource.FieldName)
	}
	if m.description != nil {
		fields = append(fields, resource.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, resource.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case resource.FieldName:
		return m.Name()
	case resource.FieldDescription:
		return m.Description()
	case resource.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case resource.FieldName:
		return m.OldName(ctx)
	case resource.FieldDescription:
		return m.OldDescription(ctx)
	case resource.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Resource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case resource.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case resource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case resource.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Resource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Resource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ResourceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ResourceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Resource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ResourceMutation) ResetField(name string) error {
	switch name {
	case resource.FieldName:
		m.ResetName()
		return nil
	case resource.FieldDescription:
		m.ResetDescription()
		return nil
	case resource.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Resource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.versions != nil {
		edges = append(edges, resource.EdgeVersions)
	}
	if m.latest_versions != nil {
		edges = append(edges, resource.EdgeLatestVersions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case resource.EdgeVersions:
		ids := make([]ent.Value, 0, len(m.versions))
		for id := range m.versions {
			ids = append(ids, id)
		}
		return ids
	case resource.EdgeLatestVersions:
		ids := make([]ent.Value, 0, len(m.latest_versions))
		for id := range m.latest_versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedversions != nil {
		edges = append(edges, resource.EdgeVersions)
	}
	if m.removedlatest_versions != nil {
		edges = append(edges, resource.EdgeLatestVersions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ResourceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case resource.EdgeVersions:
		ids := make([]ent.Value, 0, len(m.removedversions))
		for id := range m.removedversions {
			ids = append(ids, id)
		}
		return ids
	case resource.EdgeLatestVersions:
		ids := make([]ent.Value, 0, len(m.removedlatest_versions))
		for id := range m.removedlatest_versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedversions {
		edges = append(edges, resource.EdgeVersions)
	}
	if m.clearedlatest_versions {
		edges = append(edges, resource.EdgeLatestVersions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case resource.EdgeVersions:
		return m.clearedversions
	case resource.EdgeLatestVersions:
		return m.clearedlatest_versions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ResourceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Resource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ResourceMutation) ResetEdge(name string) error {
	switch name {
	case resource.EdgeVersions:
		m.ResetVersions()
		return nil
	case resource.EdgeLatestVersions:
		m.ResetLatestVersions()
		return nil
	}
	return fmt.Errorf("unknown Resource edge %s", name)
}

// StorageMutation represents an operation that mutates the Storage nodes in the graph.
type StorageMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	update_type        *storage.UpdateType
	os                 *string
	arch               *string
	package_path       *string
	resource_path      *string
	file_hashes        *map[string]string
	created_at         *time.Time
	clearedFields      map[string]struct{}
	version            *int
	clearedversion     bool
	old_version        *int
	clearedold_version bool
	done               bool
	oldValue           func(context.Context) (*Storage, error)
	predicates         []predicate.Storage
}

var _ ent.Mutation = (*StorageMutation)(nil)

// storageOption allows management of the mutation configuration using functional options.
type storageOption func(*StorageMutation)

// newStorageMutation creates new mutation for the Storage entity.
func newStorageMutation(c config, op Op, opts ...storageOption) *StorageMutation {
	m := &StorageMutation{
		config:        c,
		op:            op,
		typ:           TypeStorage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStorageID sets the ID field of the mutation.
func withStorageID(id int) storageOption {
	return func(m *StorageMutation) {
		var (
			err   error
			once  sync.Once
			value *Storage
		)
		m.oldValue = func(ctx context.Context) (*Storage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Storage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStorage sets the old Storage of the mutation.
func withStorage(node *Storage) storageOption {
	return func(m *StorageMutation) {
		m.oldValue = func(context.Context) (*Storage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StorageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StorageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StorageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StorageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Storage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUpdateType sets the "update_type" field.
func (m *StorageMutation) SetUpdateType(st storage.UpdateType) {
	m.update_type = &st
}

// UpdateType returns the value of the "update_type" field in the mutation.
func (m *StorageMutation) UpdateType() (r storage.UpdateType, exists bool) {
	v := m.update_type
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateType returns the old "update_type" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldUpdateType(ctx context.Context) (v storage.UpdateType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateType: %w", err)
	}
	return oldValue.UpdateType, nil
}

// ResetUpdateType resets all changes to the "update_type" field.
func (m *StorageMutation) ResetUpdateType() {
	m.update_type = nil
}

// SetOs sets the "os" field.
func (m *StorageMutation) SetOs(s string) {
	m.os = &s
}

// Os returns the value of the "os" field in the mutation.
func (m *StorageMutation) Os() (r string, exists bool) {
	v := m.os
	if v == nil {
		return
	}
	return *v, true
}

// OldOs returns the old "os" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldOs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOs: %w", err)
	}
	return oldValue.Os, nil
}

// ResetOs resets all changes to the "os" field.
func (m *StorageMutation) ResetOs() {
	m.os = nil
}

// SetArch sets the "arch" field.
func (m *StorageMutation) SetArch(s string) {
	m.arch = &s
}

// Arch returns the value of the "arch" field in the mutation.
func (m *StorageMutation) Arch() (r string, exists bool) {
	v := m.arch
	if v == nil {
		return
	}
	return *v, true
}

// OldArch returns the old "arch" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldArch(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArch: %w", err)
	}
	return oldValue.Arch, nil
}

// ResetArch resets all changes to the "arch" field.
func (m *StorageMutation) ResetArch() {
	m.arch = nil
}

// SetPackagePath sets the "package_path" field.
func (m *StorageMutation) SetPackagePath(s string) {
	m.package_path = &s
}

// PackagePath returns the value of the "package_path" field in the mutation.
func (m *StorageMutation) PackagePath() (r string, exists bool) {
	v := m.package_path
	if v == nil {
		return
	}
	return *v, true
}

// OldPackagePath returns the old "package_path" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldPackagePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPackagePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPackagePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPackagePath: %w", err)
	}
	return oldValue.PackagePath, nil
}

// ClearPackagePath clears the value of the "package_path" field.
func (m *StorageMutation) ClearPackagePath() {
	m.package_path = nil
	m.clearedFields[storage.FieldPackagePath] = struct{}{}
}

// PackagePathCleared returns if the "package_path" field was cleared in this mutation.
func (m *StorageMutation) PackagePathCleared() bool {
	_, ok := m.clearedFields[storage.FieldPackagePath]
	return ok
}

// ResetPackagePath resets all changes to the "package_path" field.
func (m *StorageMutation) ResetPackagePath() {
	m.package_path = nil
	delete(m.clearedFields, storage.FieldPackagePath)
}

// SetResourcePath sets the "resource_path" field.
func (m *StorageMutation) SetResourcePath(s string) {
	m.resource_path = &s
}

// ResourcePath returns the value of the "resource_path" field in the mutation.
func (m *StorageMutation) ResourcePath() (r string, exists bool) {
	v := m.resource_path
	if v == nil {
		return
	}
	return *v, true
}

// OldResourcePath returns the old "resource_path" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldResourcePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourcePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourcePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourcePath: %w", err)
	}
	return oldValue.ResourcePath, nil
}

// ClearResourcePath clears the value of the "resource_path" field.
func (m *StorageMutation) ClearResourcePath() {
	m.resource_path = nil
	m.clearedFields[storage.FieldResourcePath] = struct{}{}
}

// ResourcePathCleared returns if the "resource_path" field was cleared in this mutation.
func (m *StorageMutation) ResourcePathCleared() bool {
	_, ok := m.clearedFields[storage.FieldResourcePath]
	return ok
}

// ResetResourcePath resets all changes to the "resource_path" field.
func (m *StorageMutation) ResetResourcePath() {
	m.resource_path = nil
	delete(m.clearedFields, storage.FieldResourcePath)
}

// SetFileHashes sets the "file_hashes" field.
func (m *StorageMutation) SetFileHashes(value map[string]string) {
	m.file_hashes = &value
}

// FileHashes returns the value of the "file_hashes" field in the mutation.
func (m *StorageMutation) FileHashes() (r map[string]string, exists bool) {
	v := m.file_hashes
	if v == nil {
		return
	}
	return *v, true
}

// OldFileHashes returns the old "file_hashes" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldFileHashes(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileHashes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileHashes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileHashes: %w", err)
	}
	return oldValue.FileHashes, nil
}

// ClearFileHashes clears the value of the "file_hashes" field.
func (m *StorageMutation) ClearFileHashes() {
	m.file_hashes = nil
	m.clearedFields[storage.FieldFileHashes] = struct{}{}
}

// FileHashesCleared returns if the "file_hashes" field was cleared in this mutation.
func (m *StorageMutation) FileHashesCleared() bool {
	_, ok := m.clearedFields[storage.FieldFileHashes]
	return ok
}

// ResetFileHashes resets all changes to the "file_hashes" field.
func (m *StorageMutation) ResetFileHashes() {
	m.file_hashes = nil
	delete(m.clearedFields, storage.FieldFileHashes)
}

// SetCreatedAt sets the "created_at" field.
func (m *StorageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StorageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StorageMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetVersionID sets the "version" edge to the Version entity by id.
func (m *StorageMutation) SetVersionID(id int) {
	m.version = &id
}

// ClearVersion clears the "version" edge to the Version entity.
func (m *StorageMutation) ClearVersion() {
	m.clearedversion = true
}

// VersionCleared reports if the "version" edge to the Version entity was cleared.
func (m *StorageMutation) VersionCleared() bool {
	return m.clearedversion
}

// VersionID returns the "version" edge ID in the mutation.
func (m *StorageMutation) VersionID() (id int, exists bool) {
	if m.version != nil {
		return *m.version, true
	}
	return
}

// VersionIDs returns the "version" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VersionID instead. It exists only for internal usage by the builders.
func (m *StorageMutation) VersionIDs() (ids []int) {
	if id := m.version; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVersion resets all changes to the "version" edge.
func (m *StorageMutation) ResetVersion() {
	m.version = nil
	m.clearedversion = false
}

// SetOldVersionID sets the "old_version" edge to the Version entity by id.
func (m *StorageMutation) SetOldVersionID(id int) {
	m.old_version = &id
}

// ClearOldVersion clears the "old_version" edge to the Version entity.
func (m *StorageMutation) ClearOldVersion() {
	m.clearedold_version = true
}

// OldVersionCleared reports if the "old_version" edge to the Version entity was cleared.
func (m *StorageMutation) OldVersionCleared() bool {
	return m.clearedold_version
}

// OldVersionID returns the "old_version" edge ID in the mutation.
func (m *StorageMutation) OldVersionID() (id int, exists bool) {
	if m.old_version != nil {
		return *m.old_version, true
	}
	return
}

// OldVersionIDs returns the "old_version" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OldVersionID instead. It exists only for internal usage by the builders.
func (m *StorageMutation) OldVersionIDs() (ids []int) {
	if id := m.old_version; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOldVersion resets all changes to the "old_version" edge.
func (m *StorageMutation) ResetOldVersion() {
	m.old_version = nil
	m.clearedold_version = false
}

// Where appends a list predicates to the StorageMutation builder.
func (m *StorageMutation) Where(ps ...predicate.Storage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StorageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StorageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Storage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StorageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StorageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Storage).
func (m *StorageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StorageMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.update_type != nil {
		fields = append(fields, storage.FieldUpdateType)
	}
	if m.os != nil {
		fields = append(fields, storage.FieldOs)
	}
	if m.arch != nil {
		fields = append(fields, storage.FieldArch)
	}
	if m.package_path != nil {
		fields = append(fields, storage.FieldPackagePath)
	}
	if m.resource_path != nil {
		fields = append(fields, storage.FieldResourcePath)
	}
	if m.file_hashes != nil {
		fields = append(fields, storage.FieldFileHashes)
	}
	if m.created_at != nil {
		fields = append(fields, storage.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StorageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case storage.FieldUpdateType:
		return m.UpdateType()
	case storage.FieldOs:
		return m.Os()
	case storage.FieldArch:
		return m.Arch()
	case storage.FieldPackagePath:
		return m.PackagePath()
	case storage.FieldResourcePath:
		return m.ResourcePath()
	case storage.FieldFileHashes:
		return m.FileHashes()
	case storage.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StorageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case storage.FieldUpdateType:
		return m.OldUpdateType(ctx)
	case storage.FieldOs:
		return m.OldOs(ctx)
	case storage.FieldArch:
		return m.OldArch(ctx)
	case storage.FieldPackagePath:
		return m.OldPackagePath(ctx)
	case storage.FieldResourcePath:
		return m.OldResourcePath(ctx)
	case storage.FieldFileHashes:
		return m.OldFileHashes(ctx)
	case storage.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Storage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StorageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case storage.FieldUpdateType:
		v, ok := value.(storage.UpdateType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateType(v)
		return nil
	case storage.FieldOs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOs(v)
		return nil
	case storage.FieldArch:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArch(v)
		return nil
	case storage.FieldPackagePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPackagePath(v)
		return nil
	case storage.FieldResourcePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourcePath(v)
		return nil
	case storage.FieldFileHashes:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileHashes(v)
		return nil
	case storage.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Storage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StorageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StorageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StorageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Storage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StorageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(storage.FieldPackagePath) {
		fields = append(fields, storage.FieldPackagePath)
	}
	if m.FieldCleared(storage.FieldResourcePath) {
		fields = append(fields, storage.FieldResourcePath)
	}
	if m.FieldCleared(storage.FieldFileHashes) {
		fields = append(fields, storage.FieldFileHashes)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StorageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StorageMutation) ClearField(name string) error {
	switch name {
	case storage.FieldPackagePath:
		m.ClearPackagePath()
		return nil
	case storage.FieldResourcePath:
		m.ClearResourcePath()
		return nil
	case storage.FieldFileHashes:
		m.ClearFileHashes()
		return nil
	}
	return fmt.Errorf("unknown Storage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StorageMutation) ResetField(name string) error {
	switch name {
	case storage.FieldUpdateType:
		m.ResetUpdateType()
		return nil
	case storage.FieldOs:
		m.ResetOs()
		return nil
	case storage.FieldArch:
		m.ResetArch()
		return nil
	case storage.FieldPackagePath:
		m.ResetPackagePath()
		return nil
	case storage.FieldResourcePath:
		m.ResetResourcePath()
		return nil
	case storage.FieldFileHashes:
		m.ResetFileHashes()
		return nil
	case storage.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Storage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StorageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.version != nil {
		edges = append(edges, storage.EdgeVersion)
	}
	if m.old_version != nil {
		edges = append(edges, storage.EdgeOldVersion)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StorageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case storage.EdgeVersion:
		if id := m.version; id != nil {
			return []ent.Value{*id}
		}
	case storage.EdgeOldVersion:
		if id := m.old_version; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StorageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StorageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StorageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedversion {
		edges = append(edges, storage.EdgeVersion)
	}
	if m.clearedold_version {
		edges = append(edges, storage.EdgeOldVersion)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StorageMutation) EdgeCleared(name string) bool {
	switch name {
	case storage.EdgeVersion:
		return m.clearedversion
	case storage.EdgeOldVersion:
		return m.clearedold_version
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StorageMutation) ClearEdge(name string) error {
	switch name {
	case storage.EdgeVersion:
		m.ClearVersion()
		return nil
	case storage.EdgeOldVersion:
		m.ClearOldVersion()
		return nil
	}
	return fmt.Errorf("unknown Storage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StorageMutation) ResetEdge(name string) error {
	switch name {
	case storage.EdgeVersion:
		m.ResetVersion()
		return nil
	case storage.EdgeOldVersion:
		m.ResetOldVersion()
		return nil
	}
	return fmt.Errorf("unknown Storage edge %s", name)
}

// VersionMutation represents an operation that mutates the Version nodes in the graph.
type VersionMutation struct {
	config
	op              Op
	typ             string
	id              *int
	channel         *version.Channel
	name            *string
	number          *uint64
	addnumber       *int64
	created_at      *time.Time
	clearedFields   map[string]struct{}
	storages        map[int]struct{}
	removedstorages map[int]struct{}
	clearedstorages bool
	resource        *string
	clearedresource bool
	done            bool
	oldValue        func(context.Context) (*Version, error)
	predicates      []predicate.Version
}

var _ ent.Mutation = (*VersionMutation)(nil)

// versionOption allows management of the mutation configuration using functional options.
type versionOption func(*VersionMutation)

// newVersionMutation creates new mutation for the Version entity.
func newVersionMutation(c config, op Op, opts ...versionOption) *VersionMutation {
	m := &VersionMutation{
		config:        c,
		op:            op,
		typ:           TypeVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVersionID sets the ID field of the mutation.
func withVersionID(id int) versionOption {
	return func(m *VersionMutation) {
		var (
			err   error
			once  sync.Once
			value *Version
		)
		m.oldValue = func(ctx context.Context) (*Version, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Version.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVersion sets the old Version of the mutation.
func withVersion(node *Version) versionOption {
	return func(m *VersionMutation) {
		m.oldValue = func(context.Context) (*Version, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VersionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VersionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Version.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChannel sets the "channel" field.
func (m *VersionMutation) SetChannel(v version.Channel) {
	m.channel = &v
}

// Channel returns the value of the "channel" field in the mutation.
func (m *VersionMutation) Channel() (r version.Channel, exists bool) {
	v := m.channel
	if v == nil {
		return
	}
	return *v, true
}

// OldChannel returns the old "channel" field's value of the Version entity.
// If the Version object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VersionMutation) OldChannel(ctx context.Context) (v version.Channel, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannel: %w", err)
	}
	return oldValue.Channel, nil
}

// ResetChannel resets all changes to the "channel" field.
func (m *VersionMutation) ResetChannel() {
	m.channel = nil
}

// SetName sets the "name" field.
func (m *VersionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *VersionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Version entity.
// If the Version object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VersionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *VersionMutation) ResetName() {
	m.name = nil
}

// SetNumber sets the "number" field.
func (m *VersionMutation) SetNumber(u uint64) {
	m.number = &u
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *VersionMutation) Number() (r uint64, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Version entity.
// If the Version object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VersionMutation) OldNumber(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds u to the "number" field.
func (m *VersionMutation) AddNumber(u int64) {
	if m.addnumber != nil {
		*m.addnumber += u
	} else {
		m.addnumber = &u
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *VersionMutation) AddedNumber() (r int64, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *VersionMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *VersionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VersionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Version entity.
// If the Version object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VersionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VersionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddStorageIDs adds the "storages" edge to the Storage entity by ids.
func (m *VersionMutation) AddStorageIDs(ids ...int) {
	if m.storages == nil {
		m.storages = make(map[int]struct{})
	}
	for i := range ids {
		m.storages[ids[i]] = struct{}{}
	}
}

// ClearStorages clears the "storages" edge to the Storage entity.
func (m *VersionMutation) ClearStorages() {
	m.clearedstorages = true
}

// StoragesCleared reports if the "storages" edge to the Storage entity was cleared.
func (m *VersionMutation) StoragesCleared() bool {
	return m.clearedstorages
}

// RemoveStorageIDs removes the "storages" edge to the Storage entity by IDs.
func (m *VersionMutation) RemoveStorageIDs(ids ...int) {
	if m.removedstorages == nil {
		m.removedstorages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.storages, ids[i])
		m.removedstorages[ids[i]] = struct{}{}
	}
}

// RemovedStorages returns the removed IDs of the "storages" edge to the Storage entity.
func (m *VersionMutation) RemovedStoragesIDs() (ids []int) {
	for id := range m.removedstorages {
		ids = append(ids, id)
	}
	return
}

// StoragesIDs returns the "storages" edge IDs in the mutation.
func (m *VersionMutation) StoragesIDs() (ids []int) {
	for id := range m.storages {
		ids = append(ids, id)
	}
	return
}

// ResetStorages resets all changes to the "storages" edge.
func (m *VersionMutation) ResetStorages() {
	m.storages = nil
	m.clearedstorages = false
	m.removedstorages = nil
}

// SetResourceID sets the "resource" edge to the Resource entity by id.
func (m *VersionMutation) SetResourceID(id string) {
	m.resource = &id
}

// ClearResource clears the "resource" edge to the Resource entity.
func (m *VersionMutation) ClearResource() {
	m.clearedresource = true
}

// ResourceCleared reports if the "resource" edge to the Resource entity was cleared.
func (m *VersionMutation) ResourceCleared() bool {
	return m.clearedresource
}

// ResourceID returns the "resource" edge ID in the mutation.
func (m *VersionMutation) ResourceID() (id string, exists bool) {
	if m.resource != nil {
		return *m.resource, true
	}
	return
}

// ResourceIDs returns the "resource" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ResourceID instead. It exists only for internal usage by the builders.
func (m *VersionMutation) ResourceIDs() (ids []string) {
	if id := m.resource; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetResource resets all changes to the "resource" edge.
func (m *VersionMutation) ResetResource() {
	m.resource = nil
	m.clearedresource = false
}

// Where appends a list predicates to the VersionMutation builder.
func (m *VersionMutation) Where(ps ...predicate.Version) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VersionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VersionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Version, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VersionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VersionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Version).
func (m *VersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VersionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.channel != nil {
		fields = append(fields, version.FieldChannel)
	}
	if m.name != nil {
		fields = append(fields, version.FieldName)
	}
	if m.number != nil {
		fields = append(fields, version.FieldNumber)
	}
	if m.created_at != nil {
		fields = append(fields, version.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case version.FieldChannel:
		return m.Channel()
	case version.FieldName:
		return m.Name()
	case version.FieldNumber:
		return m.Number()
	case version.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case version.FieldChannel:
		return m.OldChannel(ctx)
	case version.FieldName:
		return m.OldName(ctx)
	case version.FieldNumber:
		return m.OldNumber(ctx)
	case version.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Version field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case version.FieldChannel:
		v, ok := value.(version.Channel)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannel(v)
		return nil
	case version.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case version.FieldNumber:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case version.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Version field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VersionMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, version.FieldNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case version.FieldNumber:
		return m.AddedNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case version.FieldNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Version numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VersionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VersionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Version nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VersionMutation) ResetField(name string) error {
	switch name {
	case version.FieldChannel:
		m.ResetChannel()
		return nil
	case version.FieldName:
		m.ResetName()
		return nil
	case version.FieldNumber:
		m.ResetNumber()
		return nil
	case version.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Version field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.storages != nil {
		edges = append(edges, version.EdgeStorages)
	}
	if m.resource != nil {
		edges = append(edges, version.EdgeResource)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VersionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case version.EdgeStorages:
		ids := make([]ent.Value, 0, len(m.storages))
		for id := range m.storages {
			ids = append(ids, id)
		}
		return ids
	case version.EdgeResource:
		if id := m.resource; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedstorages != nil {
		edges = append(edges, version.EdgeStorages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VersionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case version.EdgeStorages:
		ids := make([]ent.Value, 0, len(m.removedstorages))
		for id := range m.removedstorages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstorages {
		edges = append(edges, version.EdgeStorages)
	}
	if m.clearedresource {
		edges = append(edges, version.EdgeResource)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VersionMutation) EdgeCleared(name string) bool {
	switch name {
	case version.EdgeStorages:
		return m.clearedstorages
	case version.EdgeResource:
		return m.clearedresource
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VersionMutation) ClearEdge(name string) error {
	switch name {
	case version.EdgeResource:
		m.ClearResource()
		return nil
	}
	return fmt.Errorf("unknown Version unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VersionMutation) ResetEdge(name string) error {
	switch name {
	case version.EdgeStorages:
		m.ResetStorages()
		return nil
	case version.EdgeResource:
		m.ResetResource()
		return nil
	}
	return fmt.Errorf("unknown Version edge %s", name)
}
