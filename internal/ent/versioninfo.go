// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/MirrorChyan/resource-backend/internal/ent/versioninfo"
)

// VersionInfo is the model entity for the VersionInfo schema.
type VersionInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VersionName holds the value of the "version_name" field.
	VersionName string `json:"version_name,omitempty"`
	// ReleaseNote holds the value of the "release_note" field.
	ReleaseNote string `json:"release_note,omitempty"`
	// CustomData holds the value of the "custom_data" field.
	CustomData string `json:"custom_data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VersionInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case versioninfo.FieldID:
			values[i] = new(sql.NullInt64)
		case versioninfo.FieldVersionName, versioninfo.FieldReleaseNote, versioninfo.FieldCustomData:
			values[i] = new(sql.NullString)
		case versioninfo.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VersionInfo fields.
func (vi *VersionInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case versioninfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vi.ID = int(value.Int64)
		case versioninfo.FieldVersionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_name", values[i])
			} else if value.Valid {
				vi.VersionName = value.String
			}
		case versioninfo.FieldReleaseNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field release_note", values[i])
			} else if value.Valid {
				vi.ReleaseNote = value.String
			}
		case versioninfo.FieldCustomData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_data", values[i])
			} else if value.Valid {
				vi.CustomData = value.String
			}
		case versioninfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vi.CreatedAt = value.Time
			}
		default:
			vi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VersionInfo.
// This includes values selected through modifiers, order, etc.
func (vi *VersionInfo) Value(name string) (ent.Value, error) {
	return vi.selectValues.Get(name)
}

// Update returns a builder for updating this VersionInfo.
// Note that you need to call VersionInfo.Unwrap() before calling this method if this VersionInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (vi *VersionInfo) Update() *VersionInfoUpdateOne {
	return NewVersionInfoClient(vi.config).UpdateOne(vi)
}

// Unwrap unwraps the VersionInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vi *VersionInfo) Unwrap() *VersionInfo {
	_tx, ok := vi.config.driver.(*txDriver)
	if !ok {
		panic("ent: VersionInfo is not a transactional entity")
	}
	vi.config.driver = _tx.drv
	return vi
}

// String implements the fmt.Stringer.
func (vi *VersionInfo) String() string {
	var builder strings.Builder
	builder.WriteString("VersionInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vi.ID))
	builder.WriteString("version_name=")
	builder.WriteString(vi.VersionName)
	builder.WriteString(", ")
	builder.WriteString("release_note=")
	builder.WriteString(vi.ReleaseNote)
	builder.WriteString(", ")
	builder.WriteString("custom_data=")
	builder.WriteString(vi.CustomData)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(vi.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VersionInfos is a parsable slice of VersionInfo.
type VersionInfos []*VersionInfo
