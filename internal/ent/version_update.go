// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MirrorChyan/resource-backend/internal/ent/predicate"
	"github.com/MirrorChyan/resource-backend/internal/ent/resource"
	"github.com/MirrorChyan/resource-backend/internal/ent/storage"
	"github.com/MirrorChyan/resource-backend/internal/ent/version"
)

// VersionUpdate is the builder for updating Version entities.
type VersionUpdate struct {
	config
	hooks    []Hook
	mutation *VersionMutation
}

// Where appends a list predicates to the VersionUpdate builder.
func (vu *VersionUpdate) Where(ps ...predicate.Version) *VersionUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetChannel sets the "channel" field.
func (vu *VersionUpdate) SetChannel(v version.Channel) *VersionUpdate {
	vu.mutation.SetChannel(v)
	return vu
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableChannel(v *version.Channel) *VersionUpdate {
	if v != nil {
		vu.SetChannel(*v)
	}
	return vu
}

// SetName sets the "name" field.
func (vu *VersionUpdate) SetName(s string) *VersionUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableName(s *string) *VersionUpdate {
	if s != nil {
		vu.SetName(*s)
	}
	return vu
}

// SetNumber sets the "number" field.
func (vu *VersionUpdate) SetNumber(u uint64) *VersionUpdate {
	vu.mutation.ResetNumber()
	vu.mutation.SetNumber(u)
	return vu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableNumber(u *uint64) *VersionUpdate {
	if u != nil {
		vu.SetNumber(*u)
	}
	return vu
}

// AddNumber adds u to the "number" field.
func (vu *VersionUpdate) AddNumber(u int64) *VersionUpdate {
	vu.mutation.AddNumber(u)
	return vu
}

// SetReleaseNoteSummary sets the "release_note_summary" field.
func (vu *VersionUpdate) SetReleaseNoteSummary(s string) *VersionUpdate {
	vu.mutation.SetReleaseNoteSummary(s)
	return vu
}

// SetNillableReleaseNoteSummary sets the "release_note_summary" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableReleaseNoteSummary(s *string) *VersionUpdate {
	if s != nil {
		vu.SetReleaseNoteSummary(*s)
	}
	return vu
}

// SetReleaseNoteDetail sets the "release_note_detail" field.
func (vu *VersionUpdate) SetReleaseNoteDetail(s string) *VersionUpdate {
	vu.mutation.SetReleaseNoteDetail(s)
	return vu
}

// SetNillableReleaseNoteDetail sets the "release_note_detail" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableReleaseNoteDetail(s *string) *VersionUpdate {
	if s != nil {
		vu.SetReleaseNoteDetail(*s)
	}
	return vu
}

// SetCreatedAt sets the "created_at" field.
func (vu *VersionUpdate) SetCreatedAt(t time.Time) *VersionUpdate {
	vu.mutation.SetCreatedAt(t)
	return vu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableCreatedAt(t *time.Time) *VersionUpdate {
	if t != nil {
		vu.SetCreatedAt(*t)
	}
	return vu
}

// AddStorageIDs adds the "storages" edge to the Storage entity by IDs.
func (vu *VersionUpdate) AddStorageIDs(ids ...int) *VersionUpdate {
	vu.mutation.AddStorageIDs(ids...)
	return vu
}

// AddStorages adds the "storages" edges to the Storage entity.
func (vu *VersionUpdate) AddStorages(s ...*Storage) *VersionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vu.AddStorageIDs(ids...)
}

// SetResourceID sets the "resource" edge to the Resource entity by ID.
func (vu *VersionUpdate) SetResourceID(id string) *VersionUpdate {
	vu.mutation.SetResourceID(id)
	return vu
}

// SetNillableResourceID sets the "resource" edge to the Resource entity by ID if the given value is not nil.
func (vu *VersionUpdate) SetNillableResourceID(id *string) *VersionUpdate {
	if id != nil {
		vu = vu.SetResourceID(*id)
	}
	return vu
}

// SetResource sets the "resource" edge to the Resource entity.
func (vu *VersionUpdate) SetResource(r *Resource) *VersionUpdate {
	return vu.SetResourceID(r.ID)
}

// Mutation returns the VersionMutation object of the builder.
func (vu *VersionUpdate) Mutation() *VersionMutation {
	return vu.mutation
}

// ClearStorages clears all "storages" edges to the Storage entity.
func (vu *VersionUpdate) ClearStorages() *VersionUpdate {
	vu.mutation.ClearStorages()
	return vu
}

// RemoveStorageIDs removes the "storages" edge to Storage entities by IDs.
func (vu *VersionUpdate) RemoveStorageIDs(ids ...int) *VersionUpdate {
	vu.mutation.RemoveStorageIDs(ids...)
	return vu
}

// RemoveStorages removes "storages" edges to Storage entities.
func (vu *VersionUpdate) RemoveStorages(s ...*Storage) *VersionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vu.RemoveStorageIDs(ids...)
}

// ClearResource clears the "resource" edge to the Resource entity.
func (vu *VersionUpdate) ClearResource() *VersionUpdate {
	vu.mutation.ClearResource()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VersionUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VersionUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VersionUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VersionUpdate) check() error {
	if v, ok := vu.mutation.Channel(); ok {
		if err := version.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "Version.channel": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Name(); ok {
		if err := version.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Version.name": %w`, err)}
		}
	}
	return nil
}

func (vu *VersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(version.Table, version.Columns, sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Channel(); ok {
		_spec.SetField(version.FieldChannel, field.TypeEnum, value)
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(version.FieldName, field.TypeString, value)
	}
	if value, ok := vu.mutation.Number(); ok {
		_spec.SetField(version.FieldNumber, field.TypeUint64, value)
	}
	if value, ok := vu.mutation.AddedNumber(); ok {
		_spec.AddField(version.FieldNumber, field.TypeUint64, value)
	}
	if value, ok := vu.mutation.ReleaseNoteSummary(); ok {
		_spec.SetField(version.FieldReleaseNoteSummary, field.TypeString, value)
	}
	if value, ok := vu.mutation.ReleaseNoteDetail(); ok {
		_spec.SetField(version.FieldReleaseNoteDetail, field.TypeString, value)
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.SetField(version.FieldCreatedAt, field.TypeTime, value)
	}
	if vu.mutation.StoragesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.StoragesTable,
			Columns: []string{version.StoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedStoragesIDs(); len(nodes) > 0 && !vu.mutation.StoragesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.StoragesTable,
			Columns: []string{version.StoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.StoragesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.StoragesTable,
			Columns: []string{version.StoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.ResourceTable,
			Columns: []string{version.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.ResourceTable,
			Columns: []string{version.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{version.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VersionUpdateOne is the builder for updating a single Version entity.
type VersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VersionMutation
}

// SetChannel sets the "channel" field.
func (vuo *VersionUpdateOne) SetChannel(v version.Channel) *VersionUpdateOne {
	vuo.mutation.SetChannel(v)
	return vuo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableChannel(v *version.Channel) *VersionUpdateOne {
	if v != nil {
		vuo.SetChannel(*v)
	}
	return vuo
}

// SetName sets the "name" field.
func (vuo *VersionUpdateOne) SetName(s string) *VersionUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableName(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetName(*s)
	}
	return vuo
}

// SetNumber sets the "number" field.
func (vuo *VersionUpdateOne) SetNumber(u uint64) *VersionUpdateOne {
	vuo.mutation.ResetNumber()
	vuo.mutation.SetNumber(u)
	return vuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableNumber(u *uint64) *VersionUpdateOne {
	if u != nil {
		vuo.SetNumber(*u)
	}
	return vuo
}

// AddNumber adds u to the "number" field.
func (vuo *VersionUpdateOne) AddNumber(u int64) *VersionUpdateOne {
	vuo.mutation.AddNumber(u)
	return vuo
}

// SetReleaseNoteSummary sets the "release_note_summary" field.
func (vuo *VersionUpdateOne) SetReleaseNoteSummary(s string) *VersionUpdateOne {
	vuo.mutation.SetReleaseNoteSummary(s)
	return vuo
}

// SetNillableReleaseNoteSummary sets the "release_note_summary" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableReleaseNoteSummary(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetReleaseNoteSummary(*s)
	}
	return vuo
}

// SetReleaseNoteDetail sets the "release_note_detail" field.
func (vuo *VersionUpdateOne) SetReleaseNoteDetail(s string) *VersionUpdateOne {
	vuo.mutation.SetReleaseNoteDetail(s)
	return vuo
}

// SetNillableReleaseNoteDetail sets the "release_note_detail" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableReleaseNoteDetail(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetReleaseNoteDetail(*s)
	}
	return vuo
}

// SetCreatedAt sets the "created_at" field.
func (vuo *VersionUpdateOne) SetCreatedAt(t time.Time) *VersionUpdateOne {
	vuo.mutation.SetCreatedAt(t)
	return vuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableCreatedAt(t *time.Time) *VersionUpdateOne {
	if t != nil {
		vuo.SetCreatedAt(*t)
	}
	return vuo
}

// AddStorageIDs adds the "storages" edge to the Storage entity by IDs.
func (vuo *VersionUpdateOne) AddStorageIDs(ids ...int) *VersionUpdateOne {
	vuo.mutation.AddStorageIDs(ids...)
	return vuo
}

// AddStorages adds the "storages" edges to the Storage entity.
func (vuo *VersionUpdateOne) AddStorages(s ...*Storage) *VersionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vuo.AddStorageIDs(ids...)
}

// SetResourceID sets the "resource" edge to the Resource entity by ID.
func (vuo *VersionUpdateOne) SetResourceID(id string) *VersionUpdateOne {
	vuo.mutation.SetResourceID(id)
	return vuo
}

// SetNillableResourceID sets the "resource" edge to the Resource entity by ID if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableResourceID(id *string) *VersionUpdateOne {
	if id != nil {
		vuo = vuo.SetResourceID(*id)
	}
	return vuo
}

// SetResource sets the "resource" edge to the Resource entity.
func (vuo *VersionUpdateOne) SetResource(r *Resource) *VersionUpdateOne {
	return vuo.SetResourceID(r.ID)
}

// Mutation returns the VersionMutation object of the builder.
func (vuo *VersionUpdateOne) Mutation() *VersionMutation {
	return vuo.mutation
}

// ClearStorages clears all "storages" edges to the Storage entity.
func (vuo *VersionUpdateOne) ClearStorages() *VersionUpdateOne {
	vuo.mutation.ClearStorages()
	return vuo
}

// RemoveStorageIDs removes the "storages" edge to Storage entities by IDs.
func (vuo *VersionUpdateOne) RemoveStorageIDs(ids ...int) *VersionUpdateOne {
	vuo.mutation.RemoveStorageIDs(ids...)
	return vuo
}

// RemoveStorages removes "storages" edges to Storage entities.
func (vuo *VersionUpdateOne) RemoveStorages(s ...*Storage) *VersionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vuo.RemoveStorageIDs(ids...)
}

// ClearResource clears the "resource" edge to the Resource entity.
func (vuo *VersionUpdateOne) ClearResource() *VersionUpdateOne {
	vuo.mutation.ClearResource()
	return vuo
}

// Where appends a list predicates to the VersionUpdate builder.
func (vuo *VersionUpdateOne) Where(ps ...predicate.Version) *VersionUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VersionUpdateOne) Select(field string, fields ...string) *VersionUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Version entity.
func (vuo *VersionUpdateOne) Save(ctx context.Context) (*Version, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VersionUpdateOne) SaveX(ctx context.Context) *Version {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VersionUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VersionUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VersionUpdateOne) check() error {
	if v, ok := vuo.mutation.Channel(); ok {
		if err := version.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "Version.channel": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Name(); ok {
		if err := version.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Version.name": %w`, err)}
		}
	}
	return nil
}

func (vuo *VersionUpdateOne) sqlSave(ctx context.Context) (_node *Version, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(version.Table, version.Columns, sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Version.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, version.FieldID)
		for _, f := range fields {
			if !version.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != version.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Channel(); ok {
		_spec.SetField(version.FieldChannel, field.TypeEnum, value)
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(version.FieldName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Number(); ok {
		_spec.SetField(version.FieldNumber, field.TypeUint64, value)
	}
	if value, ok := vuo.mutation.AddedNumber(); ok {
		_spec.AddField(version.FieldNumber, field.TypeUint64, value)
	}
	if value, ok := vuo.mutation.ReleaseNoteSummary(); ok {
		_spec.SetField(version.FieldReleaseNoteSummary, field.TypeString, value)
	}
	if value, ok := vuo.mutation.ReleaseNoteDetail(); ok {
		_spec.SetField(version.FieldReleaseNoteDetail, field.TypeString, value)
	}
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.SetField(version.FieldCreatedAt, field.TypeTime, value)
	}
	if vuo.mutation.StoragesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.StoragesTable,
			Columns: []string{version.StoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedStoragesIDs(); len(nodes) > 0 && !vuo.mutation.StoragesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.StoragesTable,
			Columns: []string{version.StoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.StoragesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.StoragesTable,
			Columns: []string{version.StoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.ResourceTable,
			Columns: []string{version.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.ResourceTable,
			Columns: []string{version.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Version{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{version.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
