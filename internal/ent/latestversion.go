// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/MirrorChyan/resource-backend/internal/ent/latestversion"
	"github.com/MirrorChyan/resource-backend/internal/ent/resource"
	"github.com/MirrorChyan/resource-backend/internal/ent/version"
)

// LatestVersion is the model entity for the LatestVersion schema.
type LatestVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel latestversion.Channel `json:"channel,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LatestVersionQuery when eager-loading is set.
	Edges                    LatestVersionEdges `json:"edges"`
	latest_version_version   *int
	resource_latest_versions *string
	selectValues             sql.SelectValues
}

// LatestVersionEdges holds the relations/edges for other nodes in the graph.
type LatestVersionEdges struct {
	// Resource holds the value of the resource edge.
	Resource *Resource `json:"resource,omitempty"`
	// Version holds the value of the version edge.
	Version *Version `json:"version,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ResourceOrErr returns the Resource value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LatestVersionEdges) ResourceOrErr() (*Resource, error) {
	if e.Resource != nil {
		return e.Resource, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: resource.Label}
	}
	return nil, &NotLoadedError{edge: "resource"}
}

// VersionOrErr returns the Version value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LatestVersionEdges) VersionOrErr() (*Version, error) {
	if e.Version != nil {
		return e.Version, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: version.Label}
	}
	return nil, &NotLoadedError{edge: "version"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LatestVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case latestversion.FieldID:
			values[i] = new(sql.NullInt64)
		case latestversion.FieldChannel:
			values[i] = new(sql.NullString)
		case latestversion.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case latestversion.ForeignKeys[0]: // latest_version_version
			values[i] = new(sql.NullInt64)
		case latestversion.ForeignKeys[1]: // resource_latest_versions
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LatestVersion fields.
func (lv *LatestVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case latestversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lv.ID = int(value.Int64)
		case latestversion.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				lv.Channel = latestversion.Channel(value.String)
			}
		case latestversion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lv.UpdatedAt = value.Time
			}
		case latestversion.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field latest_version_version", value)
			} else if value.Valid {
				lv.latest_version_version = new(int)
				*lv.latest_version_version = int(value.Int64)
			}
		case latestversion.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_latest_versions", values[i])
			} else if value.Valid {
				lv.resource_latest_versions = new(string)
				*lv.resource_latest_versions = value.String
			}
		default:
			lv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LatestVersion.
// This includes values selected through modifiers, order, etc.
func (lv *LatestVersion) Value(name string) (ent.Value, error) {
	return lv.selectValues.Get(name)
}

// QueryResource queries the "resource" edge of the LatestVersion entity.
func (lv *LatestVersion) QueryResource() *ResourceQuery {
	return NewLatestVersionClient(lv.config).QueryResource(lv)
}

// QueryVersion queries the "version" edge of the LatestVersion entity.
func (lv *LatestVersion) QueryVersion() *VersionQuery {
	return NewLatestVersionClient(lv.config).QueryVersion(lv)
}

// Update returns a builder for updating this LatestVersion.
// Note that you need to call LatestVersion.Unwrap() before calling this method if this LatestVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (lv *LatestVersion) Update() *LatestVersionUpdateOne {
	return NewLatestVersionClient(lv.config).UpdateOne(lv)
}

// Unwrap unwraps the LatestVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lv *LatestVersion) Unwrap() *LatestVersion {
	_tx, ok := lv.config.driver.(*txDriver)
	if !ok {
		panic("ent: LatestVersion is not a transactional entity")
	}
	lv.config.driver = _tx.drv
	return lv
}

// String implements the fmt.Stringer.
func (lv *LatestVersion) String() string {
	var builder strings.Builder
	builder.WriteString("LatestVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lv.ID))
	builder.WriteString("channel=")
	builder.WriteString(fmt.Sprintf("%v", lv.Channel))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lv.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LatestVersions is a parsable slice of LatestVersion.
type LatestVersions []*LatestVersion
