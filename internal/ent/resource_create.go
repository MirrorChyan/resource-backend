// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MirrorChyan/resource-backend/internal/ent/latestversion"
	"github.com/MirrorChyan/resource-backend/internal/ent/resource"
	"github.com/MirrorChyan/resource-backend/internal/ent/version"
)

// ResourceCreate is the builder for creating a Resource entity.
type ResourceCreate struct {
	config
	mutation *ResourceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (rc *ResourceCreate) SetName(s string) *ResourceCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *ResourceCreate) SetDescription(s string) *ResourceCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *ResourceCreate) SetCreatedAt(t time.Time) *ResourceCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableCreatedAt(t *time.Time) *ResourceCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ResourceCreate) SetID(s string) *ResourceCreate {
	rc.mutation.SetID(s)
	return rc
}

// AddVersionIDs adds the "versions" edge to the Version entity by IDs.
func (rc *ResourceCreate) AddVersionIDs(ids ...int) *ResourceCreate {
	rc.mutation.AddVersionIDs(ids...)
	return rc
}

// AddVersions adds the "versions" edges to the Version entity.
func (rc *ResourceCreate) AddVersions(v ...*Version) *ResourceCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return rc.AddVersionIDs(ids...)
}

// AddLatestVersionIDs adds the "latest_versions" edge to the LatestVersion entity by IDs.
func (rc *ResourceCreate) AddLatestVersionIDs(ids ...int) *ResourceCreate {
	rc.mutation.AddLatestVersionIDs(ids...)
	return rc
}

// AddLatestVersions adds the "latest_versions" edges to the LatestVersion entity.
func (rc *ResourceCreate) AddLatestVersions(l ...*LatestVersion) *ResourceCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rc.AddLatestVersionIDs(ids...)
}

// Mutation returns the ResourceMutation object of the builder.
func (rc *ResourceCreate) Mutation() *ResourceMutation {
	return rc.mutation
}

// Save creates the Resource in the database.
func (rc *ResourceCreate) Save(ctx context.Context) (*Resource, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ResourceCreate) SaveX(ctx context.Context) *Resource {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ResourceCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ResourceCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ResourceCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := resource.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ResourceCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Resource.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := resource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Resource.name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Resource.description"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Resource.created_at"`)}
	}
	if v, ok := rc.mutation.ID(); ok {
		if err := resource.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Resource.id": %w`, err)}
		}
	}
	return nil
}

func (rc *ResourceCreate) sqlSave(ctx context.Context) (*Resource, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Resource.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ResourceCreate) createSpec() (*Resource, *sqlgraph.CreateSpec) {
	var (
		_node = &Resource{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(resource.Table, sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(resource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(resource.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(resource.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := rc.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.VersionsTable,
			Columns: []string{resource.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.LatestVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.LatestVersionsTable,
			Columns: []string{resource.LatestVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(latestversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Resource.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rc *ResourceCreate) OnConflict(opts ...sql.ConflictOption) *ResourceUpsertOne {
	rc.conflict = opts
	return &ResourceUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Resource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *ResourceCreate) OnConflictColumns(columns ...string) *ResourceUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &ResourceUpsertOne{
		create: rc,
	}
}

type (
	// ResourceUpsertOne is the builder for "upsert"-ing
	//  one Resource node.
	ResourceUpsertOne struct {
		create *ResourceCreate
	}

	// ResourceUpsert is the "OnConflict" setter.
	ResourceUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *ResourceUpsert) SetName(v string) *ResourceUpsert {
	u.Set(resource.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateName() *ResourceUpsert {
	u.SetExcluded(resource.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *ResourceUpsert) SetDescription(v string) *ResourceUpsert {
	u.Set(resource.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateDescription() *ResourceUpsert {
	u.SetExcluded(resource.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ResourceUpsert) SetCreatedAt(v time.Time) *ResourceUpsert {
	u.Set(resource.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateCreatedAt() *ResourceUpsert {
	u.SetExcluded(resource.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Resource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceUpsertOne) UpdateNewValues() *ResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resource.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Resource.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResourceUpsertOne) Ignore() *ResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceUpsertOne) DoNothing() *ResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceCreate.OnConflict
// documentation for more info.
func (u *ResourceUpsertOne) Update(set func(*ResourceUpsert)) *ResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ResourceUpsertOne) SetName(v string) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateName() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ResourceUpsertOne) SetDescription(v string) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateDescription() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResourceUpsertOne) SetCreatedAt(v time.Time) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateCreatedAt() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *ResourceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ResourceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResourceUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ResourceUpsertOne.ID is not supported by MySQL driver. Use ResourceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResourceUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResourceCreateBulk is the builder for creating many Resource entities in bulk.
type ResourceCreateBulk struct {
	config
	err      error
	builders []*ResourceCreate
	conflict []sql.ConflictOption
}

// Save creates the Resource entities in the database.
func (rcb *ResourceCreateBulk) Save(ctx context.Context) ([]*Resource, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Resource, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ResourceCreateBulk) SaveX(ctx context.Context) []*Resource {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ResourceCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Resource.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rcb *ResourceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResourceUpsertBulk {
	rcb.conflict = opts
	return &ResourceUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Resource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *ResourceCreateBulk) OnConflictColumns(columns ...string) *ResourceUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &ResourceUpsertBulk{
		create: rcb,
	}
}

// ResourceUpsertBulk is the builder for "upsert"-ing
// a bulk of Resource nodes.
type ResourceUpsertBulk struct {
	create *ResourceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Resource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceUpsertBulk) UpdateNewValues() *ResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resource.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Resource.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResourceUpsertBulk) Ignore() *ResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceUpsertBulk) DoNothing() *ResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceCreateBulk.OnConflict
// documentation for more info.
func (u *ResourceUpsertBulk) Update(set func(*ResourceUpsert)) *ResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ResourceUpsertBulk) SetName(v string) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateName() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ResourceUpsertBulk) SetDescription(v string) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateDescription() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ResourceUpsertBulk) SetCreatedAt(v time.Time) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateCreatedAt() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *ResourceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ResourceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ResourceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
